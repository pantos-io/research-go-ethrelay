// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethrelay

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// EthrelayMetaData contains all meta data concerning the Ethrelay contract.
var EthrelayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"totalDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ethashContractAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnCode\",\"type\":\"uint256\"}],\"name\":\"DisputeBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"NewBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errorInfo\",\"type\":\"uint256\"}],\"name\":\"PoWValidationResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RemoveBranch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyReceipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnStake\",\"type\":\"uint256\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpParent\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"name\":\"disputeBlockHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockHashesSubmittedByClient\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGenesisBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"getHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDifficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLongestChainEndpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredStakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredVerificationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"}],\"name\":\"isBlockConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isHeaderStored\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"}],\"name\":\"submitBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rlpHeaders\",\"type\":\"bytes\"}],\"name\":\"submitBlockBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedReceipt\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyReceipt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedState\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedTx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyTransaction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260008054600160a01b600160e01b03191690553480156200002457600080fd5b506040516200544538038062005445833981016040819052620000479162000b63565b8251602084012083908390839060006200006185620002a9565b9050620000b8604080516080808201835260008083526020808401829052838501829052845160c08101865282815290810182905293840181905260608481018290529184015260a0830181905290919082015290565b6040810183905260a082015162ffffff1681526001600160e81b038516602080830191909152600080546060840151600160a01b9091046001600160401b03169201919091526004805460018082018355928290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01859055546200013f919062000c74565b606080830180516001600160401b0393841690528051428416604091820152600087815260036020818152918390208751838901516001600160e81b031663010000000262ffffff9091161781558388015160018201559351805160028601805483860151968401518a16600160801b02600160801b600160c01b0319978b1668010000000000000000026001600160801b031990921693909a16929092179190911794909416969096178355938501519383019390935560808401516004830180546001600160a01b039092166001600160a01b031990921691909117905560a08401518051869593946200023d92600587019291019062000ac9565b50505060018590555050600080546001600160a01b0319166001600160a01b03861617905560028390556040518381527f5f11b60a71ba7b4124fe41971a682a44d1af8fff92e0c4852a2701e56323218a9060200160405180910390a150505050505050505062000dfa565b604080516101a08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820192909252610180810191909152604080516101a08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082018390526101008201839052610120820183905261014082018390526101608201929092526101808101919091526000620003ac6200039b856200065660201b620008721760201c565b6200068360201b6200089f1760201c565b905060005b620003c782620006fc60201b6200090b1760201c565b156200064d57806200040657620003fe620003ed836200072260201b6200092f1760201c565b6200078660201b6200098c1760201c565b835262000638565b806001141562000435576200042a620003ed836200072260201b6200092f1760201c565b602084015262000638565b8060031415620004645762000459620003ed836200072260201b6200092f1760201c565b604084015262000638565b8060041415620004935762000488620003ed836200072260201b6200092f1760201c565b606084015262000638565b8060051415620004c257620004b7620003ed836200072260201b6200092f1760201c565b608084015262000638565b8060071415620004f257620004e6620003ed836200072260201b6200092f1760201c565b61016084015262000638565b8060081415620005215762000516620003ed836200072260201b6200092f1760201c565b60a084015262000638565b8060091415620005505762000545620003ed836200072260201b6200092f1760201c565b60c084015262000638565b80600a14156200057f5762000574620003ed836200072260201b6200092f1760201c565b60e084015262000638565b80600b1415620005af57620005a3620003ed836200072260201b6200092f1760201c565b61012084015262000638565b80600c1415620005f057620005e4620005d3836200072260201b6200092f1760201c565b6200081060201b62000a071760201c565b61018084015262000638565b80600e1415620006205762000614620003ed836200072260201b6200092f1760201c565b61014084015262000638565b62000636826200072260201b6200092f1760201c565b505b80620006448162000c8e565b915050620003b1565b50909392505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6040805160808101825260009181018281526060820183905281526020810191909152620006b182620008bf565b620006bb57600080fd5b6000620006d28360200151620008fa60201b60201c565b8360200151620006e3919062000cac565b6040805180820190915293845260208401525090919050565b80518051602082015160009291620007149162000cac565b836020015110915050919050565b60408051808201909152600080825260208201526200074182620006fc565b6200074b57600080fd5b602082015160006200075d8262000989565b90506200076b818362000cac565b60209485015260408051808201909152908152928301525090565b8051600090158015906200079c57508151602110155b620007a657600080fd5b6000620007bd8360200151620008fa60201b60201c565b90506000818460000151620007d3919062000c74565b9050600080838660200151620007ea919062000cac565b90508051915060208310156200080757826020036101000a820491505b50949350505050565b80516060906200081f57600080fd5b6000620008368360200151620008fa60201b60201c565b905060008184600001516200084c919062000c74565b90506000816001600160401b038111156200086b576200086b62000b30565b6040519080825280601f01601f19166020018201604052801562000896576020820181803683370190505b509050600081602001905062000807848760200151620008b7919062000cac565b828562000a3f565b8051600090620008d157506000919050565b6020820151805160001a9060c0821015620008f0575060009392505050565b5060019392505050565b8051600090811a6080811015620009145750600092915050565b60b881108062000931575060c0811080159062000931575060f881105b15620009405750600192915050565b60c08110156200097b5762000958600160b862000cc7565b620009679060ff168262000c74565b6200097490600162000cac565b9392505050565b62000958600160f862000cc7565b80516000908190811a6080811015620009a6576001915062000a38565b60b8811015620009d257620009bd60808262000c74565b620009ca90600162000cac565b915062000a38565b60c081101562000a015760b78103600185019450806020036101000a8551046001820181019350505062000a38565b60f881101562000a1857620009bd60c08262000c74565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8062000a4a57505050565b6020811062000a8a578251825262000a6460208462000cac565b925062000a7360208362000cac565b915062000a8260208262000c74565b905062000a4a565b6000600162000a9b83602062000c74565b62000aa99061010062000dec565b62000ab5919062000c74565b935183518516941916939093179091525050565b82805482825590600052602060002090810192821562000b07579160200282015b8281111562000b0757825182559160200191906001019062000aea565b5062000b1592915062000b19565b5090565b5b8082111562000b15576000815560010162000b1a565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811462000b5e57600080fd5b919050565b60008060006060848603121562000b7957600080fd5b83516001600160401b038082111562000b9157600080fd5b818601915086601f83011262000ba657600080fd5b81518181111562000bbb5762000bbb62000b30565b604051601f8201601f19908116603f0116810190838211818310171562000be65762000be662000b30565b8160405282815260209350898484870101111562000c0357600080fd5b600091505b8282101562000c27578482018401518183018501529083019062000c08565b8282111562000c395760008484830101525b809750505050808601519350505062000c556040850162000b46565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b60008282101562000c895762000c8962000c5e565b500390565b600060001982141562000ca55762000ca562000c5e565b5060010190565b6000821982111562000cc25762000cc262000c5e565b500190565b600060ff821660ff84168082101562000ce45762000ce462000c5e565b90039392505050565b600181815b8085111562000d2e57816000190482111562000d125762000d1262000c5e565b8085161562000d2057918102915b93841c939080029062000cf2565b509250929050565b60008262000d475750600162000de6565b8162000d565750600062000de6565b816001811462000d6f576002811462000d7a5762000d9a565b600191505062000de6565b60ff84111562000d8e5762000d8e62000c5e565b50506001821b62000de6565b5060208310610133831016604e8410600b841016171562000dbf575081810a62000de6565b62000dcb838362000ced565b806000190482111562000de25762000de262000c5e565b0290505b92915050565b600062000974838362000d36565b61463b8062000e0a6000396000f3fe6080604052600436106100fe5760003560e01c8063b961587811610095578063dfd6dff811610064578063dfd6dff8146102ca578063ed315dfa146102dd578063f06dab9e146102f0578063fbdf930d14610312578063fc0e3d901461033257600080fd5b8063b9615878146101ec578063cb82cc8f14610253578063d0f0923b14610266578063d5107381146102aa57600080fd5b80633452e2db116100d15780633452e2db1461017e5780635e29b7da14610199578063acef3a1e146101be578063addd9b38146101d957600080fd5b80630d6501a6146101035780631b2e10541461012757806325d5971f1461014957806329a12be914610169575b600080fd5b34801561010f57600080fd5b506001545b6040519081526020015b60405180910390f35b34801561013357600080fd5b50610147610142366004613c61565b610354565b005b34801561015557600080fd5b50610147610164366004613c95565b6103a0565b34801561017557600080fd5b50600254610114565b34801561018a57600080fd5b5067016345785d8a0000610114565b6101ac6101a7366004613cc4565b6104be565b60405160ff909116815260200161011e565b3480156101ca57600080fd5b50670de0b6b3a7640000610114565b6101ac6101e7366004613cc4565b610518565b3480156101f857600080fd5b50610238610207366004613c95565b600090815260036020526040902060018101549054909162ffffff821691630100000090046001600160e81b031690565b6040805193845260208401929092529082015260600161011e565b610147610261366004613c95565b610561565b34801561027257600080fd5b5061029a610281366004613c95565b60009081526003602052604090205462ffffff16151590565b604051901515815260200161011e565b3480156102b657600080fd5b506101476102c5366004613c61565b6105ae565b61029a6102d8366004613d89565b610689565b6101ac6102eb366004613cc4565b6106e4565b3480156102fc57600080fd5b5061030561072d565b60405161011e9190613dbe565b34801561031e57600080fd5b5061014761032d366004613e81565b61078e565b34801561033e57600080fd5b5033600090815260066020526040902054610114565b600061036761036283610872565b61089f565b90505b6103738161090b565b1561039c57600061038b6103868361092f565b610a07565b9050610396816105ae565b5061036a565b5050565b3360009081526006602052604090205481111561040f5760405162461bcd60e51b815260206004820152602260248201527f616d6f756e7420686967686572207468616e206465706f7369746564207374616044820152616b6560f01b60648201526084015b60405180910390fd5b8061041933610aa3565b10610465576104283382610b28565b60408051338152602081018390527f141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec91015b60405180910390a150565b61046e33610b98565b508061047933610aa3565b10610488576104283382610b28565b60408051338152600060208201527f141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec910161045a565b6000806104d16001898989898989610d35565b60405160ff821681529091507f567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6906020015b60405180910390a190505b9695505050505050565b60008061052b6003898989898989610d35565b60405160ff821681529091507fb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce90602001610503565b3481146105805760405162461bcd60e51b815260040161040690613f5e565b3360009081526006602052604090205461059b903490613fc3565b3360009081526006602052604090205550565b670de0b6b3a76400006105c033610aa3565b1015610619576105cf33610b98565b50670de0b6b3a76400006105e233610aa3565b101561061957604051600081527f5f11b60a71ba7b4124fe41971a682a44d1af8fff92e0c4852a2701e56323218a9060200161045a565b60006106258233610e8f565b33600090815260056020908152604080832080546001810182559084529190922001829055519091507f5f11b60a71ba7b4124fe41971a682a44d1af8fff92e0c4852a2701e56323218a9061067d9083815260200190565b60405180910390a15050565b60003484146106aa5760405162461bcd60e51b815260040161040690613f5e565b67016345785d8a00008410156106d25760405162461bcd60e51b815260040161040690613fdb565b6106dc8383611369565b949350505050565b6000806106f76002898989898989610d35565b60405160ff821681529091507f0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf79090602001610503565b3360009081526005602090815260409182902080548351818402810184019094528084526060939283018282801561078457602002820191906000526020600020905b815481526020019060010190808311610770575b5050505050905090565b600061079d868686868661144c565b90506000805b82518110156108445760008382815181106107c0576107c0614021565b60200260200101519050670de0b6b3a764000060066000836001600160a01b03166001600160a01b03168152602001908152602001600020546108039190614037565b6001600160a01b03821660009081526006602052604090205561082e670de0b6b3a764000084613fc3565b925050808061083c9061404e565b9150506107a3565b503360009081526006602052604081208054839290610864908490613fc3565b909155505050505050505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b60408051608081018252600091810182815260608201839052815260208101919091526108cb826114f0565b6108d457600080fd5b60006108e38360200151611529565b83602001516108f29190613fc3565b6040805180820190915293845260208401525090919050565b8051805160208201516000929161092191613fc3565b836020015110915050919050565b604080518082019091526000808252602082015261094c8261090b565b61095557600080fd5b60208201516000610965826115a4565b90506109718183613fc3565b60209485015260408051808201909152908152928301525090565b8051600090158015906109a157508151602110155b6109aa57600080fd5b60006109b98360200151611529565b905060008184600001516109cd9190614037565b90506000808386602001516109e29190613fc3565b90508051915060208310156109fe57826020036101000a820491505b50949350505050565b8051606090610a1557600080fd5b6000610a248360200151611529565b90506000818460000151610a389190614037565b90506000816001600160401b03811115610a5457610a54613bac565b6040519080825280601f01601f191660200182016040528015610a7e576020820181803683370190505b50905060008160200190506109fe848760200151610a9c9190613fc3565b8285611648565b6001600160a01b0381166000908152600560205260408120548190610ad190670de0b6b3a764000090614069565b6001600160a01b038416600090815260066020526040902054909150811115610afd5750600092915050565b6001600160a01b038316600090815260066020526040902054610b21908290614037565b9392505050565b6001600160a01b038216600090815260066020526040902054610b4c908290614037565b6001600160a01b038316600081815260066020526040808220939093559151909183156108fc02918491818181858888f19350505050158015610b93573d6000803e3d6000fd5b505050565b600080805b6001600160a01b038416600090815260056020526040902054811015610d2e576001600160a01b0384166000908152600560205260408120805483908110610be757610be7614021565b90600052602060002001549050610c118160009081526003602052604090205462ffffff16151590565b1580610c215750610c21816116c3565b15610d1a576001600160a01b038516600090815260056020526040812054610c4b90600190614037565b6001600160a01b038716600090815260056020526040902080549192509082908110610c7957610c79614021565b906000526020600020015460056000886001600160a01b03166001600160a01b031681526020019081526020016000208481548110610cba57610cba614021565b60009182526020808320909101929092556001600160a01b0388168152600590915260409020805480610cef57610cef614088565b60019003818190600052602060002001600090559055600184610d129190613fc3565b935050610d28565b81610d248161404e565b9250505b50610b9d565b5092915050565b6000348714610d565760405162461bcd60e51b815260040161040690613f5e565b67016345785d8a0000871015610d7e5760405162461bcd60e51b815260040161040690613fdb565b85516020870120600060ff8a1660011415610db057610da98288888888610da48e6116eb565b61174d565b9050610e32565b60ff8a1660021415610dcd57610da98288888888610da48e61192f565b60ff8a1660031415610dea57610da98288888888610da48e611982565b60405162461bcd60e51b815260206004820152601960248201527f556e6b6e6f776e20766572696669636174696f6e2074797065000000000000006044820152606401610406565b6000610e3d836119d5565b6040519096508695506001600160a01b03861694508f156108fc0293508f925090506000818181858888f19350505050158015610e7e573d6000803e3d6000fd5b50919b9a5050505050505050505050565b6000610ee5604080516080808201835260008083526020808401829052838501829052845160c08101865282815290810182905293840181905260608481018290529184015260a0830181905290919082015290565b83516020850120610f098160009081526003602052604090205462ffffff16151590565b15610f4d5760405162461bcd60e51b8152602060048201526014602482015273626c6f636b20616c72656164792065786973747360601b6044820152606401610406565b6000806000610f5b88611aba565b600083815260036020526040902054929550909350915062ffffff16610fbb5760405162461bcd60e51b81526020600482015260156024820152741c185c995b9d08191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610406565b600083815260036020908152604080832060058101805460018101825590855292909320909101869055860185905262ffffff83168652805461100f908390630100000090046001600160e81b0316613fc3565b6001600160e81b0316602087015261102961012c42613fc3565b6060870180516001600160401b03928316604090910152516001600160a01b038a1660809091015260028201546004549116108015611093575060028101546004805486926001600160401b031690811061108657611086614021565b9060005260206000200154145b1561111e57600281015460608701516001600160401b03600160401b8304811660209092019190915260408801516004805491939092169081106110d9576110d9614021565b600091825260209091200155600281018054606080890180516001600160401b038416905267ffffffffffffffff19909216909255600383015490519091015261122c565b6001600060148282829054906101000a90046001600160401b0316611143919061409e565b82546101009290920a6001600160401b038181021990931691831602179091556000805460608a0151600160a01b90910490921660209092019190915260408801516004805460018181018355938290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0191909155546111c59250614037565b606080880180516001600160401b0390931690925290510184905260058101546002141561122c5761122c600360008360020160030160008154811061120d5761120d614021565b9060005260206000200154815260200190815260200160002085611b5f565b600154600090815260036020908152604090912054908701516001600160e81b0363010000009092048216911611156112655760018590555b60408087018051600090815260036020818152918490208a51838c01516001600160e81b031663010000000262ffffff909116178155925160018401556060808b0151805160028601805483870151988401516001600160401b03908116600160801b0267ffffffffffffffff60801b199a8216600160401b026fffffffffffffffffffffffffffffffff1990931691909416171797909716178655908101519184019190915560808101516004840180546001600160a01b039092166001600160a01b031990921691909117905560a081015180518b959293611350926005870192910190613abd565b5050506040909701519750505050505050505b92915050565b60008281526003602052604081205462ffffff1661138957506000611363565b60008061139885600154611bc2565b9092509050816113ad57600092505050611363565b6000858152600360205260409020546113cf9060ff86169062ffffff166140c9565b60008281526003602052604090205462ffffff91821691161161144157600085815260036020526040808220548383529120546114149162ffffff90811691166140e7565b61141e908561410b565b9350600061142c8286611d00565b90508061143f5760009350505050611363565b505b506001949350505050565b6060600061145d8787878787611d86565b60408051600081526020810190915290915081156114b2576114af888860405161148892919061412e565b60405180910390206003600089805190602001208152602001908152602001600020611eaf565b90505b6040518281527ff68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd361409060200160405180910390a1979650505050505050565b805160009061150157506000919050565b6020820151805160001a9060c082101561151f575060009392505050565b5060019392505050565b8051600090811a60808110156115425750600092915050565b60b881108061155d575060c0811080159061155d575060f881105b1561156b5750600192915050565b60c081101561159857611580600160b861410b565b61158d9060ff1682614037565b610b21906001613fc3565b611580600160f861410b565b80516000908190811a60808110156115bf5760019150610d2e565b60b88110156115e5576115d3608082614037565b6115de906001613fc3565b9150610d2e565b60c08110156116125760b78103600185019450806020036101000a85510460018201810193505050610d2e565b60f8811015611626576115d360c082614037565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8061165257505050565b6020811061168a5782518252611669602084613fc3565b9250611676602083613fc3565b9150611683602082614037565b9050611652565b60006001611699836020614037565b6116a590610100614222565b6116af9190614037565b935183518516941916939093179091525050565b60009081526003602052604090206002015442600160801b9091046001600160401b03161090565b6000806116fa61036284610872565b905060005b6117088261090b565b15611743578060041415611727576106dc6117228361092f565b61098c565b6117308261092f565b508061173b8161404e565b9150506116ff565b5060009392505050565b60008681526003602052604081205462ffffff166117a45760405162461bcd60e51b8152602060048201526014602482015273189b1bd8dac8191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610406565b6000806117b389600154611bc2565b91509150816118175760405162461bcd60e51b815260206004820152602a60248201527f626c6f636b206973206e6f742070617274206f6620746865206c6f6e67657374604482015269102837ab9031b430b4b760b11b6064820152608401610406565b6000898152600360205260409020546118399060ff8a169062ffffff166140c9565b60008281526003602052604090205462ffffff918216911611611901576000898152600360205260408082205483835291205461187e9162ffffff90811691166140e7565b611888908961410b565b97506000611896828a611d00565b9050806118ff5760405162461bcd60e51b815260206004820152603160248201527f626c6f636b206973206c6f636b6564206f72206e6f7420636f6e6669726d656460448201527020627920656e6f75676820626c6f636b7360781b6064820152608401610406565b505b600061190f88888888612178565b11156119205760019250505061050e565b50600098975050505050505050565b60008061193e61036284610872565b905060005b61194c8261090b565b15611743578060051415611966576106dc6117228361092f565b61196f8261092f565b508061197a8161404e565b915050611943565b60008061199161036284610872565b905060005b61199f8261090b565b156117435780600314156119b9576106dc6117228361092f565b6119c28261092f565b50806119cd8161404e565b915050611996565b6000818152600360208181526040808420600281015493810154600482015460058301805485518188028101880190965280865260609897889788978897889790966001600160401b03600160401b8604811696818716969395600160801b909404909116936001600160a01b0390921692889190830182828015611a7957602002820191906000526020600020905b815481526020019060010190808311611a65575b50505050509550846001600160401b03169450836001600160401b03169350816001600160401b031691509650965096509650965096505091939550919395565b600080600080600080600080611ad26103628a610872565b90505b611ade8161090b565b15611b505784611afb57611af46117228261092f565b9350611b3e565b8460071415611b1757611b106117228261092f565b9150611b3e565b8460081415611b3357611b2c6117228261092f565b9250611b3e565b611b3c8161092f565b505b84611b488161404e565b955050611ad5565b50919790965090945092505050565b6003820154811415611b6f575050565b6003820181905560058201546001141561039c5761039c6003600084600201600301600081548110611ba357611ba3614021565b9060005260206000200154815260200190815260200160002082611b5f565b600080828180611bd1836116c3565b15611bda578291505b60008781526003602052604080822060029081015486845291909220909101546001600160401b03600160401b92839004811692909104161115611c6857506000918252600360208190526040909220600281015492015491600160401b90046001600160401b031681611c6357611c51836116c3565b15611c6357611c608382612418565b91505b611bda565b60008781526003602052604080822060029081015486845291909220909101546001600160401b03600160401b92839004811692909104161015611cb45750600093509150611cf99050565b6000878152600360205260408082205485835291205462ffffff91821691161015611ce75750600093509150611cf99050565b81611cf0578691505b50600193509150505b9250929050565b6000611d0b836116c3565b611d1757506000611363565b60ff8216611d2757506001611363565b600083815260036020526040902060050154611d4557506000611363565b60008381526003602052604081206005018054610b219290611d6957611d69614021565b9060005260206000200154600184611d81919061410b565b611d00565b6000806000806000611dcf8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92506124b6915050565b9296509094509250905083611ea157600080546001600160a01b03166329e265df85611dfb8e8e612937565b86868d8d6040518763ffffffff1660e01b8152600401611e2096959493929190614269565b6040805180830381865afa158015611e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6091906142b8565b60408051838152602081018390529297509092507f368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e910160405180910390a1505b509198975050505050505050565b60606000611ebe846000612ac2565b600584015490915060011415611f375760018084015460048054808401825560008290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b019190915554611f139190614037565b60028401805467ffffffffffffffff19166001600160401b03929092169190911790555b60005b60058401548110156120015784846002016003018281548110611f5f57611f5f614021565b90600052602060002001541415611fef57600584018054611f8290600190614037565b81548110611f9257611f92614021565b9060005260206000200154846002016003018281548110611fb557611fb5614021565b60009182526020909120015560058401805480611fd457611fd4614088565b60019003818190600052602060002001600090559055612001565b80611ff98161404e565b915050611f3a565b5060058301546001141561206a5761206a600360008560020160030160008154811061202f5761202f614021565b600091825260208083209091015483528201929092526040019020600385015460028601546001600160401b03600160401b90910416612df5565b600460008154811061207e5761207e614021565b60009182526020909120015460019081555b60045481101561213d5760015460009081526003602081905260408220546004805463010000009092046001600160e81b03169391859081106120d5576120d5614021565b600091825260208083209091015483528201929092526040019020546001600160e81b03630100000090910416111561212b576004818154811061211b5761211b614021565b6000918252602090912001546001555b806121358161404e565b915050612090565b506040518481527ff96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d49060200160405180910390a19392505050565b60008061218484610872565b9050600061219182612e86565b9050606080856000806121a38b612f9b565b90508051600014156121bf5760019750505050505050506106dc565b60005b86518110156124085781518311156121e5576002985050505050505050506106dc565b6122078782815181106121fa576121fa614021565b6020026020010151610a07565b955085805190602001208414612228576003985050505050505050506106dc565b61223961223487610872565b612e86565b945084516011141561230e57815183141561229b578c8051906020012061226c866010815181106121fa576121fa614021565b80519060200120141561228a576000985050505050505050506106dc565b6004985050505050505050506106dc565b60008284815181106122af576122af614021565b016020015160f81c905060108111156122d457600599505050505050505050506106dc565b6122f9868260ff16815181106122ec576122ec614021565b602002602001015161098c565b9450612306600185613fc3565b9350506123f6565b8451600214156123e557612338612331866000815181106121fa576121fa614021565b8385613042565b6123429084613fc3565b9250815183141561239a578c8051906020012061236b866001815181106121fa576121fa614021565b805190602001201415612389576000985050505050505050506106dc565b6006985050505050505050506106dc565b6123b3612331866000815181106121fa576121fa614021565b6123c8576007985050505050505050506106dc565b6123de856001815181106122ec576122ec614021565b93506123f6565b6008985050505050505050506106dc565b806124008161404e565b9150506121c2565b5050505050505050949350505050565b6000805b6000848152600360205260409020600501548110156124ae57600084815260036020526040812060050180548390811061245857612458614021565b600091825260208083209091015480835260039091526040909120600201549091506001600160401b03600160401b9091041684141561249b5791506113639050565b50806124a68161404e565b91505061241c565b509192915050565b815160208084019190912082518383012060008281526003909352604083205483928392839262ffffff1661252d5760405162461bcd60e51b815260206004820152601e60248201527f70726f76696465642068656164657220646f6573206e6f7420657869737400006044820152606401610406565b60008181526003602052604090205462ffffff1661258d5760405162461bcd60e51b815260206004820152601e60248201527f70726f766964656420706172656e7420646f6573206e6f7420657869737400006044820152606401610406565b612596826116c3565b156125e35760405162461bcd60e51b815260206004820152601960248201527f6469737075746520706572696f642069732065787069726564000000000000006044820152606401610406565b600082815260036020818152604080842085855293819020815160808082018452865462ffffff81168352630100000090046001600160e81b031682860152600187015482850152835160c0810185526002880180546001600160401b038082168452600160401b82048116848a0152600160801b90910416828701529688015460608083019190915260048901546001600160a01b03169282019290925260058801805486518189028101890190975280875294976127e69794968a96948801959394919360a08601939192908301828280156126e057602002820191906000526020600020905b8154815260200190600101908083116126cc575b505050919092525050509052506040805160808082018352855462ffffff81168352630100000090046001600160e81b0316602080840191909152600187015483850152835160c0810185526002880180546001600160401b038082168452600160401b8204811684860152600160801b9091041682870152600389015460608084019190915260048a01546001600160a01b03169483019490945260058901805487518186028101860190985280885295968a96958801959394929360a08601939192918301828280156127d457602002820191906000526020600020905b8154815260200190600101908083116127c0575b5050505050815250508152505061314b565b6128675760405162461bcd60e51b815260206004820152604660248201527f73746f72656420706172656e74206973206e6f7420612070726564656365737360448201527f6f72206f662073746f726564206865616465722077697468696e2054657374696064820152656d6f6e69756d60d01b608482015260a401610406565b60006128728b6131b0565b9050600061287f8b6131b0565b825190915085146129035760405162461bcd60e51b815260206004820152604260248201527f70726f766964656420686561646572277320706172656e7420646f6573206e6f60448201527f74206d6174636820776974682070726f766964656420706172656e74272068616064820152610e6d60f31b608482015260a401610406565b61290d8282613378565b935461014083015161016090930151949d62ffffff9091169c50919a509298509650505050505050565b60008061297c61036285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061087292505050565b90506003600080805b61298e8561090b565b156129e15782600d14156129a0578391505b60006129ab8661092f565b80519091506129ba9086613fc3565b945083600e14156129ce57849150506129e1565b836129d88161404e565b94505050612985565b60006129ef83828a8c6142dc565b6129fb8a85818e6142dc565b604051602001612a0e9493929190614306565b60408051601f1981840301815291905290506000612a2c8484614037565b612a3760038b614037565b612a419190614037565b905060f081901b8060001a60f81b83600181518110612a6257612a62614021565b60200101906001600160f81b031916908160001a9053508060011a60f81b83600281518110612a9357612a93614021565b60200101906001600160f81b031916908160001a90535082805190602001209850505050505050505092915050565b600082815260036020526040902060609081612adf600185613fc3565b600583015490945060011015612bbb5760408051600080825260208201909252905b6005840154811015612b5e576000612b3c856002016003018381548110612b2a57612b2a614021565b90600052602060002001546000612ac2565b9050612b488382613495565b9250508080612b569061404e565b915050612b01565b50612bb7858251612b6f9190613fc3565b6001600160401b03811115612b8657612b86613bac565b604051908082528060200260200182016040528015612baf578160200160208202803683370190505b5082876135c6565b9150505b600582015460011415612bf857612bf582600201600301600081548110612be457612be4614021565b906000526020600020015485612ac2565b90505b60028201546004546001600160401b03909116108015612c43575060028201546004805487926001600160401b0316908110612c3657612c36614021565b9060005260206000200154145b15612d48576004805460009190612c5c90600190614037565b81548110612c6c57612c6c614021565b600091825260209091200154600284015460048054929350839290916001600160401b0316908110612ca057612ca0614021565b6000918252602090912001556004805480612cbd57612cbd614088565b60008281526020808220830160001990810183905590920190925560028086015484845260039092526040909220909101805467ffffffffffffffff19166001600160401b039283161790558590811115612d1a57612d1a613bac565b604051908082528060200260200182016040528015612d43578160200160208202803683370190505b509150505b6000858152600360205260409020600401546001600160a01b031681612d6f600187614037565b81518110612d7f57612d7f614021565b6001600160a01b03909216602092830291909101820152600086815260039182905260408120818155600181018290556002810180546001600160c01b03191681559281018290556004810180546001600160a01b03191690559181612de86005850182613b08565b5092979650505050505050565b6003830154821415612e0657505050565b600383018290556002830180546fffffffffffffffff00000000000000001916600160401b6001600160401b03841602179055600583015460011415610b9357610b936003600085600201600301600081548110612e6657612e66614021565b906000526020600020015481526020019081526020016000208383612df5565b6060612e91826114f0565b612e9a57600080fd5b6000612ea58361365d565b90506000816001600160401b03811115612ec157612ec1613bac565b604051908082528060200260200182016040528015612f0657816020015b6040805180820190915260008082526020820152815260200190600190039081612edf5790505b5090506000612f188560200151611529565b8560200151612f279190613fc3565b90506000805b84811015612f9057612f3e836115a4565b9150604051806040016040528083815260200184815250848281518110612f6757612f67614021565b6020908102919091010152612f7c8284613fc3565b925080612f888161404e565b915050612f2d565b509195945050505050565b6060600082516002612fad9190614069565b6001600160401b03811115612fc457612fc4613bac565b6040519080825280601f01601f191660200182016040528015612fee576020820181803683370190505b50905060005b8151811015610d2e5761300781856136d7565b82828151811061301957613019614021565b60200101906001600160f81b031916908160001a9053508061303a8161404e565b915050612ff4565b600080600061305086613758565b9050600081516001600160401b0381111561306d5761306d613bac565b6040519080825280601f01601f191660200182016040528015613097576020820181803683370190505b509050845b82516130a89087613fc3565b81101561311b5760008782815181106130c3576130c3614021565b01602001516001600160f81b031916905080836130e08985614037565b815181106130f0576130f0614021565b60200101906001600160f81b031916908160001a9053505080806131139061404e565b91505061309c565b5080805190602001208280519060200120141561313b5781519250613140565b600092505b509095945050505050565b6000805b826060015160a0015151811015611743576000836060015160a00151828151811061317c5761317c614021565b60200260200101519050846040015181141561319d57600192505050611363565b50806131a88161404e565b91505061314f565b6131b8613b29565b6131c0613b29565b60006131ce61036285610872565b905060005b6131dc8261090b565b1561336f57806131f9576131f26117228361092f565b835261335d565b80600114156132185761320e6117228361092f565b602084015261335d565b80600314156132375761322d6117228361092f565b604084015261335d565b80600414156132565761324c6117228361092f565b606084015261335d565b80600514156132755761326b6117228361092f565b608084015261335d565b80600714156132955761328a6117228361092f565b61016084015261335d565b80600814156132b4576132aa6117228361092f565b60a084015261335d565b80600914156132d3576132c96117228361092f565b60c084015261335d565b80600a14156132f2576132e86117228361092f565b60e084015261335d565b80600b1415613312576133076117228361092f565b61012084015261335d565b80600c1415613332576133276103868361092f565b61018084015261335d565b80600e1415613352576133476117228361092f565b61014084015261335d565b61335b8261092f565b505b806133678161404e565b9150506131d3565b50909392505050565b6000602060ff1683610180015151111561339457506003611363565b61339f600f42613fc3565b83610120015111156133b357506005611363565b677fffffffffffffff8360c0015111156133cf57506008611363565b60c083015161138811156133e557506009611363565b60045415613474578260a001518260a0015160016134039190613fc3565b1461341057506004611363565b8261012001518261012001511061342957506006611363565b600061343a83856101200151613907565b90508361016001518114613452576007915050611363565b6134648460c001518460c00151613a73565b61347257600a915050611363565b505b8260c001518360e00151111561348c5750600b611363565b50600092915050565b60606000825184516134a79190613fc3565b6001600160401b038111156134be576134be613bac565b6040519080825280602002602001820160405280156134e7578160200160208202803683370190505b50905060005b845181101561354c5784818151811061350857613508614021565b602002602001015182828151811061352257613522614021565b6001600160a01b0390921660209283029190910190910152806135448161404e565b9150506134ed565b60005b84518110156135bc5784818151811061356a5761356a614021565b602002602001015183838151811061358457613584614021565b6001600160a01b0390921660209283029190910190910152816135a68161404e565b92505080806135b49061404e565b91505061354f565b5090949350505050565b606082518285516135d79190614037565b10156135e257600080fd5b8160005b84518110156136535784818151811061360157613601614021565b602002602001015186838151811061361b5761361b614021565b6001600160a01b03909216602092830291909101909101528161363d8161404e565b925050808061364b9061404e565b9150506135e6565b5093949350505050565b805160009061366e57506000919050565b60008061367e8460200151611529565b846020015161368d9190613fc3565b90506000846000015185602001516136a59190613fc3565b90505b8082101561336f576136b9826115a4565b6136c39083613fc3565b9150826136cf8161404e565b9350506136a8565b60006136e460028461433e565b1561371e576010826136f7600286614352565b8151811061370757613707614021565b0160200151613719919060f81c614366565b61374e565b60108261372c600286614352565b8151811061373c5761373c614021565b016020015161374e919060f81c614388565b60f81b9392505050565b606080600083511115611363576000806137736000866136d7565b60f81c9050600181148061378a57508060ff166003145b156138315760018551600261379f9190614069565b6137a99190614037565b6001600160401b038111156137c0576137c0613bac565b6040519080825280601f01601f1916602001820160405280156137ea576020820181803683370190505b50925060006137fa6001876136d7565b9050808460008151811061381057613810614021565b60200101906001600160f81b031916908160001a9053506001925050613894565b6002855160026138419190614069565b61384b9190614037565b6001600160401b0381111561386257613862613bac565b6040519080825280601f01601f19166020018201604052801561388c576020820181803683370190505b509250600091505b60ff82165b83518110156138fe576138c36138b260ff851683614037565b6138bd906002613fc3565b876136d7565b8482815181106138d5576138d5614021565b60200101906001600160f81b031916908160001a905350806138f68161404e565b915050613899565b50505092915050565b60008060098461012001518461391d9190614037565b6139279190614352565b90507f1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934784602001511415613967576139608160016143aa565b9050613975565b6139728160026143aa565b90505b60621981121561398457506062195b8061080085610160015161399891906143e9565b6139a29190614417565b8461016001516139b2919061449c565b9050620200008112156139c55750620200005b60a0840151624c4b3f9062d228c8906139df906001613fc3565b106139ee575062a344df613a0e565b628c61808560a001516001613a039190613fc3565b10613a0e57506289543f5b6000818660a0015110613a2e57818660a00151613a2b9190614037565b90505b6000613a3d620186a083614352565b90506001811115612f9057613a53600282614037565b613a5e906002614222565b613a689085613fc3565b945050505050611363565b600080613a82610400846144dd565b90506000613a90848661451c565b905060008160070b1215613aad57613aaa6000198261456e565b90505b600791820b910b13159392505050565b828054828255906000526020600020908101928215613af8579160200282015b82811115613af8578251825591602001919060010190613add565b50613b04929150613b97565b5090565b5080546000825590600052602060002090810190613b269190613b97565b50565b604080516101a08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201839052610140820183905261016082019290925261018081019190915290565b5b80821115613b045760008155600101613b98565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613bea57613bea613bac565b604052919050565b600082601f830112613c0357600080fd5b81356001600160401b03811115613c1c57613c1c613bac565b613c2f601f8201601f1916602001613bc2565b818152846020838601011115613c4457600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613c7357600080fd5b81356001600160401b03811115613c8957600080fd5b6106dc84828501613bf2565b600060208284031215613ca757600080fd5b5035919050565b803560ff81168114613cbf57600080fd5b919050565b60008060008060008060c08789031215613cdd57600080fd5b8635955060208701356001600160401b0380821115613cfb57600080fd5b613d078a838b01613bf2565b9650613d1560408a01613cae565b95506060890135915080821115613d2b57600080fd5b613d378a838b01613bf2565b94506080890135915080821115613d4d57600080fd5b613d598a838b01613bf2565b935060a0890135915080821115613d6f57600080fd5b50613d7c89828a01613bf2565b9150509295509295509295565b600080600060608486031215613d9e57600080fd5b8335925060208401359150613db560408501613cae565b90509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613df657835183529284019291840191600101613dda565b50909695505050505050565b600082601f830112613e1357600080fd5b813560206001600160401b03821115613e2e57613e2e613bac565b8160051b613e3d828201613bc2565b9283528481018201928281019087851115613e5757600080fd5b83870192505b84831015613e7657823582529183019190830190613e5d565b979650505050505050565b600080600080600060808688031215613e9957600080fd5b85356001600160401b0380821115613eb057600080fd5b818801915088601f830112613ec457600080fd5b813581811115613ed357600080fd5b896020828501011115613ee557600080fd5b602092830197509550908701359080821115613f0057600080fd5b613f0c89838a01613bf2565b94506040880135915080821115613f2257600080fd5b613f2e89838a01613e02565b93506060880135915080821115613f4457600080fd5b50613f5188828901613e02565b9150509295509295909350565b6020808252602f908201527f7472616e7366657220616d6f756e74206e6f7420657175616c20746f2066756e60408201526e31ba34b7b7103830b930b6b2ba32b960891b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115613fd657613fd6613fad565b500190565b60208082526026908201527f70726f766964656420666565206973206c657373207468616e2065787065637460408201526565642066656560d01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008282101561404957614049613fad565b500390565b600060001982141561406257614062613fad565b5060010190565b600081600019048311821515161561408357614083613fad565b500290565b634e487b7160e01b600052603160045260246000fd5b60006001600160401b038083168185168083038211156140c0576140c0613fad565b01949350505050565b600062ffffff8083168185168083038211156140c0576140c0613fad565b600062ffffff8381169083168181101561410357614103613fad565b039392505050565b600060ff821660ff84168082101561412557614125613fad565b90039392505050565b8183823760009101908152919050565b600181815b8085111561417957816000190482111561415f5761415f613fad565b8085161561416c57918102915b93841c9390800290614143565b509250929050565b60008261419057506001611363565b8161419d57506000611363565b81600181146141b357600281146141bd576141d9565b6001915050611363565b60ff8411156141ce576141ce613fad565b50506001821b611363565b5060208310610133831016604e8410600b84101617156141fc575081810a611363565b614206838361413e565b806000190482111561421a5761421a613fad565b029392505050565b6000610b218383614181565b600081518084526020808501945080840160005b8381101561425e57815187529582019590820190600101614242565b509495945050505050565b62ffffff8716815285602082015284604082015283606082015260c06080820152600061429960c083018561422e565b82810360a08401526142ab818561422e565b9998505050505050505050565b600080604083850312156142cb57600080fd5b505080516020909101519092909150565b600080858511156142ec57600080fd5b838611156142f957600080fd5b5050820193919092039150565b8385823760008482016000815283858237600093019283525090949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261434d5761434d614328565b500690565b60008261436157614361614328565b500490565b600060ff83168061437957614379614328565b8060ff84160691505092915050565b600060ff83168061439b5761439b614328565b8060ff84160491505092915050565b60008083128015600160ff1b8501841216156143c8576143c8613fad565b6001600160ff1b03840183138116156143e3576143e3613fad565b50500390565b6000826143f8576143f8614328565b600160ff1b82146000198414161561441257614412613fad565b500590565b60006001600160ff1b038184138284138082168684048611161561443d5761443d613fad565b600160ff1b600087128281168783058912161561445c5761445c613fad565b6000871292508782058712848416161561447857614478613fad565b8785058712818416161561448e5761448e613fad565b505050929093029392505050565b600080821280156001600160ff1b03849003851316156144be576144be613fad565b600160ff1b83900384128116156144d7576144d7613fad565b50500190565b60008160070b8360070b806144f4576144f4614328565b677fffffffffffffff1982146000198214161561451357614513613fad565b90059392505050565b60008160070b8360070b6000811281677fffffffffffffff190183128115161561454857614548613fad565b81677fffffffffffffff01831381161561456457614564613fad565b5090039392505050565b60008160070b8360070b677fffffffffffffff60008213600084138383048511828216161561459f5761459f613fad565b677fffffffffffffff1960008512828116878305871216156145c3576145c3613fad565b600087129250858205871284841616156145df576145df613fad565b858505871281841616156145f5576145f5613fad565b505050929091029594505050505056fea2646970667358221220840a75758bc0103ed7b6967446d2f3750b67a8f93bf716fd73c4949ddae7772164736f6c634300080b0033",
}

// EthrelayABI is the input ABI used to generate the binding from.
// Deprecated: Use EthrelayMetaData.ABI instead.
var EthrelayABI = EthrelayMetaData.ABI

// EthrelayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthrelayMetaData.Bin instead.
var EthrelayBin = EthrelayMetaData.Bin

// DeployEthrelay deploys a new Ethereum contract, binding an instance of Ethrelay to it.
func DeployEthrelay(auth *bind.TransactOpts, backend bind.ContractBackend, _rlpHeader []byte, totalDifficulty *big.Int, _ethashContractAddr common.Address) (common.Address, *types.Transaction, *Ethrelay, error) {
	parsed, err := EthrelayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthrelayBin), backend, _rlpHeader, totalDifficulty, _ethashContractAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ethrelay{EthrelayCaller: EthrelayCaller{contract: contract}, EthrelayTransactor: EthrelayTransactor{contract: contract}, EthrelayFilterer: EthrelayFilterer{contract: contract}}, nil
}

// Ethrelay is an auto generated Go binding around an Ethereum contract.
type Ethrelay struct {
	EthrelayCaller     // Read-only binding to the contract
	EthrelayTransactor // Write-only binding to the contract
	EthrelayFilterer   // Log filterer for contract events
}

// EthrelayCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthrelayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthrelayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthrelayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthrelayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthrelayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthrelaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthrelaySession struct {
	Contract     *Ethrelay         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthrelayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthrelayCallerSession struct {
	Contract *EthrelayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// EthrelayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthrelayTransactorSession struct {
	Contract     *EthrelayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// EthrelayRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthrelayRaw struct {
	Contract *Ethrelay // Generic contract binding to access the raw methods on
}

// EthrelayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthrelayCallerRaw struct {
	Contract *EthrelayCaller // Generic read-only contract binding to access the raw methods on
}

// EthrelayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthrelayTransactorRaw struct {
	Contract *EthrelayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthrelay creates a new instance of Ethrelay, bound to a specific deployed contract.
func NewEthrelay(address common.Address, backend bind.ContractBackend) (*Ethrelay, error) {
	contract, err := bindEthrelay(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ethrelay{EthrelayCaller: EthrelayCaller{contract: contract}, EthrelayTransactor: EthrelayTransactor{contract: contract}, EthrelayFilterer: EthrelayFilterer{contract: contract}}, nil
}

// NewEthrelayCaller creates a new read-only instance of Ethrelay, bound to a specific deployed contract.
func NewEthrelayCaller(address common.Address, caller bind.ContractCaller) (*EthrelayCaller, error) {
	contract, err := bindEthrelay(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthrelayCaller{contract: contract}, nil
}

// NewEthrelayTransactor creates a new write-only instance of Ethrelay, bound to a specific deployed contract.
func NewEthrelayTransactor(address common.Address, transactor bind.ContractTransactor) (*EthrelayTransactor, error) {
	contract, err := bindEthrelay(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthrelayTransactor{contract: contract}, nil
}

// NewEthrelayFilterer creates a new log filterer instance of Ethrelay, bound to a specific deployed contract.
func NewEthrelayFilterer(address common.Address, filterer bind.ContractFilterer) (*EthrelayFilterer, error) {
	contract, err := bindEthrelay(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthrelayFilterer{contract: contract}, nil
}

// bindEthrelay binds a generic wrapper to an already deployed contract.
func bindEthrelay(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthrelayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ethrelay *EthrelayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ethrelay.Contract.EthrelayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ethrelay *EthrelayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ethrelay.Contract.EthrelayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ethrelay *EthrelayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ethrelay.Contract.EthrelayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ethrelay *EthrelayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ethrelay.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ethrelay *EthrelayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ethrelay.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ethrelay *EthrelayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ethrelay.Contract.contract.Transact(opts, method, params...)
}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Ethrelay *EthrelayCaller) GetBlockHashesSubmittedByClient(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _Ethrelay.contract.Call(opts, &out, "getBlockHashesSubmittedByClient")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Ethrelay *EthrelaySession) GetBlockHashesSubmittedByClient() ([][32]byte, error) {
	return _Ethrelay.Contract.GetBlockHashesSubmittedByClient(&_Ethrelay.CallOpts)
}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Ethrelay *EthrelayCallerSession) GetBlockHashesSubmittedByClient() ([][32]byte, error) {
	return _Ethrelay.Contract.GetBlockHashesSubmittedByClient(&_Ethrelay.CallOpts)
}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Ethrelay *EthrelayCaller) GetGenesisBlockHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Ethrelay.contract.Call(opts, &out, "getGenesisBlockHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Ethrelay *EthrelaySession) GetGenesisBlockHash() ([32]byte, error) {
	return _Ethrelay.Contract.GetGenesisBlockHash(&_Ethrelay.CallOpts)
}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Ethrelay *EthrelayCallerSession) GetGenesisBlockHash() ([32]byte, error) {
	return _Ethrelay.Contract.GetGenesisBlockHash(&_Ethrelay.CallOpts)
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Ethrelay *EthrelayCaller) GetHeader(opts *bind.CallOpts, blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	var out []interface{}
	err := _Ethrelay.contract.Call(opts, &out, "getHeader", blockHash)

	outstruct := new(struct {
		Hash            [32]byte
		BlockNumber     *big.Int
		TotalDifficulty *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalDifficulty = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Ethrelay *EthrelaySession) GetHeader(blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	return _Ethrelay.Contract.GetHeader(&_Ethrelay.CallOpts, blockHash)
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Ethrelay *EthrelayCallerSession) GetHeader(blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	return _Ethrelay.Contract.GetHeader(&_Ethrelay.CallOpts, blockHash)
}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Ethrelay *EthrelayCaller) GetLongestChainEndpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Ethrelay.contract.Call(opts, &out, "getLongestChainEndpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Ethrelay *EthrelaySession) GetLongestChainEndpoint() ([32]byte, error) {
	return _Ethrelay.Contract.GetLongestChainEndpoint(&_Ethrelay.CallOpts)
}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Ethrelay *EthrelayCallerSession) GetLongestChainEndpoint() ([32]byte, error) {
	return _Ethrelay.Contract.GetLongestChainEndpoint(&_Ethrelay.CallOpts)
}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Ethrelay *EthrelayCaller) GetRequiredStakePerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ethrelay.contract.Call(opts, &out, "getRequiredStakePerBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Ethrelay *EthrelaySession) GetRequiredStakePerBlock() (*big.Int, error) {
	return _Ethrelay.Contract.GetRequiredStakePerBlock(&_Ethrelay.CallOpts)
}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Ethrelay *EthrelayCallerSession) GetRequiredStakePerBlock() (*big.Int, error) {
	return _Ethrelay.Contract.GetRequiredStakePerBlock(&_Ethrelay.CallOpts)
}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Ethrelay *EthrelayCaller) GetRequiredVerificationFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ethrelay.contract.Call(opts, &out, "getRequiredVerificationFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Ethrelay *EthrelaySession) GetRequiredVerificationFee() (*big.Int, error) {
	return _Ethrelay.Contract.GetRequiredVerificationFee(&_Ethrelay.CallOpts)
}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Ethrelay *EthrelayCallerSession) GetRequiredVerificationFee() (*big.Int, error) {
	return _Ethrelay.Contract.GetRequiredVerificationFee(&_Ethrelay.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Ethrelay *EthrelayCaller) GetStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ethrelay.contract.Call(opts, &out, "getStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Ethrelay *EthrelaySession) GetStake() (*big.Int, error) {
	return _Ethrelay.Contract.GetStake(&_Ethrelay.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Ethrelay *EthrelayCallerSession) GetStake() (*big.Int, error) {
	return _Ethrelay.Contract.GetStake(&_Ethrelay.CallOpts)
}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Ethrelay *EthrelayCaller) IsHeaderStored(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _Ethrelay.contract.Call(opts, &out, "isHeaderStored", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Ethrelay *EthrelaySession) IsHeaderStored(hash [32]byte) (bool, error) {
	return _Ethrelay.Contract.IsHeaderStored(&_Ethrelay.CallOpts, hash)
}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Ethrelay *EthrelayCallerSession) IsHeaderStored(hash [32]byte) (bool, error) {
	return _Ethrelay.Contract.IsHeaderStored(&_Ethrelay.CallOpts, hash)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Ethrelay *EthrelayTransactor) DepositStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "depositStake", amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Ethrelay *EthrelaySession) DepositStake(amount *big.Int) (*types.Transaction, error) {
	return _Ethrelay.Contract.DepositStake(&_Ethrelay.TransactOpts, amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Ethrelay *EthrelayTransactorSession) DepositStake(amount *big.Int) (*types.Transaction, error) {
	return _Ethrelay.Contract.DepositStake(&_Ethrelay.TransactOpts, amount)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfbdf930d.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Ethrelay *EthrelayTransactor) DisputeBlockHeader(opts *bind.TransactOpts, rlpHeader []byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "disputeBlockHeader", rlpHeader, rlpParent, dataSetLookup, witnessForLookup)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfbdf930d.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Ethrelay *EthrelaySession) DisputeBlockHeader(rlpHeader []byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Ethrelay.Contract.DisputeBlockHeader(&_Ethrelay.TransactOpts, rlpHeader, rlpParent, dataSetLookup, witnessForLookup)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfbdf930d.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Ethrelay *EthrelayTransactorSession) DisputeBlockHeader(rlpHeader []byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Ethrelay.Contract.DisputeBlockHeader(&_Ethrelay.TransactOpts, rlpHeader, rlpParent, dataSetLookup, witnessForLookup)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Ethrelay *EthrelayTransactor) IsBlockConfirmed(opts *bind.TransactOpts, feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "isBlockConfirmed", feeInWei, blockHash, noOfConfirmations)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Ethrelay *EthrelaySession) IsBlockConfirmed(feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Ethrelay.Contract.IsBlockConfirmed(&_Ethrelay.TransactOpts, feeInWei, blockHash, noOfConfirmations)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Ethrelay *EthrelayTransactorSession) IsBlockConfirmed(feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Ethrelay.Contract.IsBlockConfirmed(&_Ethrelay.TransactOpts, feeInWei, blockHash, noOfConfirmations)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Ethrelay *EthrelayTransactor) SubmitBlock(opts *bind.TransactOpts, rlpHeader []byte) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "submitBlock", rlpHeader)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Ethrelay *EthrelaySession) SubmitBlock(rlpHeader []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.SubmitBlock(&_Ethrelay.TransactOpts, rlpHeader)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Ethrelay *EthrelayTransactorSession) SubmitBlock(rlpHeader []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.SubmitBlock(&_Ethrelay.TransactOpts, rlpHeader)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Ethrelay *EthrelayTransactor) SubmitBlockBatch(opts *bind.TransactOpts, _rlpHeaders []byte) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "submitBlockBatch", _rlpHeaders)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Ethrelay *EthrelaySession) SubmitBlockBatch(_rlpHeaders []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.SubmitBlockBatch(&_Ethrelay.TransactOpts, _rlpHeaders)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Ethrelay *EthrelayTransactorSession) SubmitBlockBatch(_rlpHeaders []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.SubmitBlockBatch(&_Ethrelay.TransactOpts, _rlpHeaders)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelayTransactor) VerifyReceipt(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "verifyReceipt", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelaySession) VerifyReceipt(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.VerifyReceipt(&_Ethrelay.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelayTransactorSession) VerifyReceipt(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.VerifyReceipt(&_Ethrelay.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelayTransactor) VerifyState(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "verifyState", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelaySession) VerifyState(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.VerifyState(&_Ethrelay.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelayTransactorSession) VerifyState(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.VerifyState(&_Ethrelay.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelayTransactor) VerifyTransaction(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "verifyTransaction", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelaySession) VerifyTransaction(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.VerifyTransaction(&_Ethrelay.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Ethrelay *EthrelayTransactorSession) VerifyTransaction(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Ethrelay.Contract.VerifyTransaction(&_Ethrelay.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Ethrelay *EthrelayTransactor) WithdrawStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Ethrelay.contract.Transact(opts, "withdrawStake", amount)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Ethrelay *EthrelaySession) WithdrawStake(amount *big.Int) (*types.Transaction, error) {
	return _Ethrelay.Contract.WithdrawStake(&_Ethrelay.TransactOpts, amount)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Ethrelay *EthrelayTransactorSession) WithdrawStake(amount *big.Int) (*types.Transaction, error) {
	return _Ethrelay.Contract.WithdrawStake(&_Ethrelay.TransactOpts, amount)
}

// EthrelayDisputeBlockIterator is returned from FilterDisputeBlock and is used to iterate over the raw logs and unpacked data for DisputeBlock events raised by the Ethrelay contract.
type EthrelayDisputeBlockIterator struct {
	Event *EthrelayDisputeBlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthrelayDisputeBlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthrelayDisputeBlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthrelayDisputeBlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthrelayDisputeBlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthrelayDisputeBlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthrelayDisputeBlock represents a DisputeBlock event raised by the Ethrelay contract.
type EthrelayDisputeBlock struct {
	ReturnCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDisputeBlock is a free log retrieval operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Ethrelay *EthrelayFilterer) FilterDisputeBlock(opts *bind.FilterOpts) (*EthrelayDisputeBlockIterator, error) {

	logs, sub, err := _Ethrelay.contract.FilterLogs(opts, "DisputeBlock")
	if err != nil {
		return nil, err
	}
	return &EthrelayDisputeBlockIterator{contract: _Ethrelay.contract, event: "DisputeBlock", logs: logs, sub: sub}, nil
}

// WatchDisputeBlock is a free log subscription operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Ethrelay *EthrelayFilterer) WatchDisputeBlock(opts *bind.WatchOpts, sink chan<- *EthrelayDisputeBlock) (event.Subscription, error) {

	logs, sub, err := _Ethrelay.contract.WatchLogs(opts, "DisputeBlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthrelayDisputeBlock)
				if err := _Ethrelay.contract.UnpackLog(event, "DisputeBlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputeBlock is a log parse operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Ethrelay *EthrelayFilterer) ParseDisputeBlock(log types.Log) (*EthrelayDisputeBlock, error) {
	event := new(EthrelayDisputeBlock)
	if err := _Ethrelay.contract.UnpackLog(event, "DisputeBlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthrelayNewBlockIterator is returned from FilterNewBlock and is used to iterate over the raw logs and unpacked data for NewBlock events raised by the Ethrelay contract.
type EthrelayNewBlockIterator struct {
	Event *EthrelayNewBlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthrelayNewBlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthrelayNewBlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthrelayNewBlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthrelayNewBlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthrelayNewBlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthrelayNewBlock represents a NewBlock event raised by the Ethrelay contract.
type EthrelayNewBlock struct {
	BlockHash [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewBlock is a free log retrieval operation binding the contract event 0x5f11b60a71ba7b4124fe41971a682a44d1af8fff92e0c4852a2701e56323218a.
//
// Solidity: event NewBlock(bytes32 blockHash)
func (_Ethrelay *EthrelayFilterer) FilterNewBlock(opts *bind.FilterOpts) (*EthrelayNewBlockIterator, error) {

	logs, sub, err := _Ethrelay.contract.FilterLogs(opts, "NewBlock")
	if err != nil {
		return nil, err
	}
	return &EthrelayNewBlockIterator{contract: _Ethrelay.contract, event: "NewBlock", logs: logs, sub: sub}, nil
}

// WatchNewBlock is a free log subscription operation binding the contract event 0x5f11b60a71ba7b4124fe41971a682a44d1af8fff92e0c4852a2701e56323218a.
//
// Solidity: event NewBlock(bytes32 blockHash)
func (_Ethrelay *EthrelayFilterer) WatchNewBlock(opts *bind.WatchOpts, sink chan<- *EthrelayNewBlock) (event.Subscription, error) {

	logs, sub, err := _Ethrelay.contract.WatchLogs(opts, "NewBlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthrelayNewBlock)
				if err := _Ethrelay.contract.UnpackLog(event, "NewBlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewBlock is a log parse operation binding the contract event 0x5f11b60a71ba7b4124fe41971a682a44d1af8fff92e0c4852a2701e56323218a.
//
// Solidity: event NewBlock(bytes32 blockHash)
func (_Ethrelay *EthrelayFilterer) ParseNewBlock(log types.Log) (*EthrelayNewBlock, error) {
	event := new(EthrelayNewBlock)
	if err := _Ethrelay.contract.UnpackLog(event, "NewBlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthrelayPoWValidationResultIterator is returned from FilterPoWValidationResult and is used to iterate over the raw logs and unpacked data for PoWValidationResult events raised by the Ethrelay contract.
type EthrelayPoWValidationResultIterator struct {
	Event *EthrelayPoWValidationResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthrelayPoWValidationResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthrelayPoWValidationResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthrelayPoWValidationResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthrelayPoWValidationResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthrelayPoWValidationResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthrelayPoWValidationResult represents a PoWValidationResult event raised by the Ethrelay contract.
type EthrelayPoWValidationResult struct {
	ReturnCode *big.Int
	ErrorInfo  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPoWValidationResult is a free log retrieval operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Ethrelay *EthrelayFilterer) FilterPoWValidationResult(opts *bind.FilterOpts) (*EthrelayPoWValidationResultIterator, error) {

	logs, sub, err := _Ethrelay.contract.FilterLogs(opts, "PoWValidationResult")
	if err != nil {
		return nil, err
	}
	return &EthrelayPoWValidationResultIterator{contract: _Ethrelay.contract, event: "PoWValidationResult", logs: logs, sub: sub}, nil
}

// WatchPoWValidationResult is a free log subscription operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Ethrelay *EthrelayFilterer) WatchPoWValidationResult(opts *bind.WatchOpts, sink chan<- *EthrelayPoWValidationResult) (event.Subscription, error) {

	logs, sub, err := _Ethrelay.contract.WatchLogs(opts, "PoWValidationResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthrelayPoWValidationResult)
				if err := _Ethrelay.contract.UnpackLog(event, "PoWValidationResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePoWValidationResult is a log parse operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Ethrelay *EthrelayFilterer) ParsePoWValidationResult(log types.Log) (*EthrelayPoWValidationResult, error) {
	event := new(EthrelayPoWValidationResult)
	if err := _Ethrelay.contract.UnpackLog(event, "PoWValidationResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthrelayRemoveBranchIterator is returned from FilterRemoveBranch and is used to iterate over the raw logs and unpacked data for RemoveBranch events raised by the Ethrelay contract.
type EthrelayRemoveBranchIterator struct {
	Event *EthrelayRemoveBranch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthrelayRemoveBranchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthrelayRemoveBranch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthrelayRemoveBranch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthrelayRemoveBranchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthrelayRemoveBranchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthrelayRemoveBranch represents a RemoveBranch event raised by the Ethrelay contract.
type EthrelayRemoveBranch struct {
	Root [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemoveBranch is a free log retrieval operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Ethrelay *EthrelayFilterer) FilterRemoveBranch(opts *bind.FilterOpts) (*EthrelayRemoveBranchIterator, error) {

	logs, sub, err := _Ethrelay.contract.FilterLogs(opts, "RemoveBranch")
	if err != nil {
		return nil, err
	}
	return &EthrelayRemoveBranchIterator{contract: _Ethrelay.contract, event: "RemoveBranch", logs: logs, sub: sub}, nil
}

// WatchRemoveBranch is a free log subscription operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Ethrelay *EthrelayFilterer) WatchRemoveBranch(opts *bind.WatchOpts, sink chan<- *EthrelayRemoveBranch) (event.Subscription, error) {

	logs, sub, err := _Ethrelay.contract.WatchLogs(opts, "RemoveBranch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthrelayRemoveBranch)
				if err := _Ethrelay.contract.UnpackLog(event, "RemoveBranch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveBranch is a log parse operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Ethrelay *EthrelayFilterer) ParseRemoveBranch(log types.Log) (*EthrelayRemoveBranch, error) {
	event := new(EthrelayRemoveBranch)
	if err := _Ethrelay.contract.UnpackLog(event, "RemoveBranch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthrelayVerifyReceiptIterator is returned from FilterVerifyReceipt and is used to iterate over the raw logs and unpacked data for VerifyReceipt events raised by the Ethrelay contract.
type EthrelayVerifyReceiptIterator struct {
	Event *EthrelayVerifyReceipt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthrelayVerifyReceiptIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthrelayVerifyReceipt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthrelayVerifyReceipt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthrelayVerifyReceiptIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthrelayVerifyReceiptIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthrelayVerifyReceipt represents a VerifyReceipt event raised by the Ethrelay contract.
type EthrelayVerifyReceipt struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyReceipt is a free log retrieval operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Ethrelay *EthrelayFilterer) FilterVerifyReceipt(opts *bind.FilterOpts) (*EthrelayVerifyReceiptIterator, error) {

	logs, sub, err := _Ethrelay.contract.FilterLogs(opts, "VerifyReceipt")
	if err != nil {
		return nil, err
	}
	return &EthrelayVerifyReceiptIterator{contract: _Ethrelay.contract, event: "VerifyReceipt", logs: logs, sub: sub}, nil
}

// WatchVerifyReceipt is a free log subscription operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Ethrelay *EthrelayFilterer) WatchVerifyReceipt(opts *bind.WatchOpts, sink chan<- *EthrelayVerifyReceipt) (event.Subscription, error) {

	logs, sub, err := _Ethrelay.contract.WatchLogs(opts, "VerifyReceipt")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthrelayVerifyReceipt)
				if err := _Ethrelay.contract.UnpackLog(event, "VerifyReceipt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyReceipt is a log parse operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Ethrelay *EthrelayFilterer) ParseVerifyReceipt(log types.Log) (*EthrelayVerifyReceipt, error) {
	event := new(EthrelayVerifyReceipt)
	if err := _Ethrelay.contract.UnpackLog(event, "VerifyReceipt", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthrelayVerifyStateIterator is returned from FilterVerifyState and is used to iterate over the raw logs and unpacked data for VerifyState events raised by the Ethrelay contract.
type EthrelayVerifyStateIterator struct {
	Event *EthrelayVerifyState // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthrelayVerifyStateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthrelayVerifyState)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthrelayVerifyState)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthrelayVerifyStateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthrelayVerifyStateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthrelayVerifyState represents a VerifyState event raised by the Ethrelay contract.
type EthrelayVerifyState struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyState is a free log retrieval operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Ethrelay *EthrelayFilterer) FilterVerifyState(opts *bind.FilterOpts) (*EthrelayVerifyStateIterator, error) {

	logs, sub, err := _Ethrelay.contract.FilterLogs(opts, "VerifyState")
	if err != nil {
		return nil, err
	}
	return &EthrelayVerifyStateIterator{contract: _Ethrelay.contract, event: "VerifyState", logs: logs, sub: sub}, nil
}

// WatchVerifyState is a free log subscription operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Ethrelay *EthrelayFilterer) WatchVerifyState(opts *bind.WatchOpts, sink chan<- *EthrelayVerifyState) (event.Subscription, error) {

	logs, sub, err := _Ethrelay.contract.WatchLogs(opts, "VerifyState")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthrelayVerifyState)
				if err := _Ethrelay.contract.UnpackLog(event, "VerifyState", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyState is a log parse operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Ethrelay *EthrelayFilterer) ParseVerifyState(log types.Log) (*EthrelayVerifyState, error) {
	event := new(EthrelayVerifyState)
	if err := _Ethrelay.contract.UnpackLog(event, "VerifyState", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthrelayVerifyTransactionIterator is returned from FilterVerifyTransaction and is used to iterate over the raw logs and unpacked data for VerifyTransaction events raised by the Ethrelay contract.
type EthrelayVerifyTransactionIterator struct {
	Event *EthrelayVerifyTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthrelayVerifyTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthrelayVerifyTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthrelayVerifyTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthrelayVerifyTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthrelayVerifyTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthrelayVerifyTransaction represents a VerifyTransaction event raised by the Ethrelay contract.
type EthrelayVerifyTransaction struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyTransaction is a free log retrieval operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Ethrelay *EthrelayFilterer) FilterVerifyTransaction(opts *bind.FilterOpts) (*EthrelayVerifyTransactionIterator, error) {

	logs, sub, err := _Ethrelay.contract.FilterLogs(opts, "VerifyTransaction")
	if err != nil {
		return nil, err
	}
	return &EthrelayVerifyTransactionIterator{contract: _Ethrelay.contract, event: "VerifyTransaction", logs: logs, sub: sub}, nil
}

// WatchVerifyTransaction is a free log subscription operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Ethrelay *EthrelayFilterer) WatchVerifyTransaction(opts *bind.WatchOpts, sink chan<- *EthrelayVerifyTransaction) (event.Subscription, error) {

	logs, sub, err := _Ethrelay.contract.WatchLogs(opts, "VerifyTransaction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthrelayVerifyTransaction)
				if err := _Ethrelay.contract.UnpackLog(event, "VerifyTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyTransaction is a log parse operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Ethrelay *EthrelayFilterer) ParseVerifyTransaction(log types.Log) (*EthrelayVerifyTransaction, error) {
	event := new(EthrelayVerifyTransaction)
	if err := _Ethrelay.contract.UnpackLog(event, "VerifyTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthrelayWithdrawStakeIterator is returned from FilterWithdrawStake and is used to iterate over the raw logs and unpacked data for WithdrawStake events raised by the Ethrelay contract.
type EthrelayWithdrawStakeIterator struct {
	Event *EthrelayWithdrawStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthrelayWithdrawStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthrelayWithdrawStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthrelayWithdrawStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthrelayWithdrawStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthrelayWithdrawStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthrelayWithdrawStake represents a WithdrawStake event raised by the Ethrelay contract.
type EthrelayWithdrawStake struct {
	Client         common.Address
	WithdrawnStake *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawStake is a free log retrieval operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Ethrelay *EthrelayFilterer) FilterWithdrawStake(opts *bind.FilterOpts) (*EthrelayWithdrawStakeIterator, error) {

	logs, sub, err := _Ethrelay.contract.FilterLogs(opts, "WithdrawStake")
	if err != nil {
		return nil, err
	}
	return &EthrelayWithdrawStakeIterator{contract: _Ethrelay.contract, event: "WithdrawStake", logs: logs, sub: sub}, nil
}

// WatchWithdrawStake is a free log subscription operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Ethrelay *EthrelayFilterer) WatchWithdrawStake(opts *bind.WatchOpts, sink chan<- *EthrelayWithdrawStake) (event.Subscription, error) {

	logs, sub, err := _Ethrelay.contract.WatchLogs(opts, "WithdrawStake")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthrelayWithdrawStake)
				if err := _Ethrelay.contract.UnpackLog(event, "WithdrawStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawStake is a log parse operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Ethrelay *EthrelayFilterer) ParseWithdrawStake(log types.Log) (*EthrelayWithdrawStake, error) {
	event := new(EthrelayWithdrawStake)
	if err := _Ethrelay.contract.UnpackLog(event, "WithdrawStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
