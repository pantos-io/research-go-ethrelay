// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package testimonium

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TestimoniumABI is the input ABI used to generate the binding from.
const TestimoniumABI = "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"totalDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ethashContractAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnCode\",\"type\":\"uint256\"}],\"name\":\"DisputeBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errorInfo\",\"type\":\"uint256\"}],\"name\":\"PoWValidationResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RemoveBranch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"SubmitBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyReceipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnStake\",\"type\":\"uint256\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpParent\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"name\":\"disputeBlockHeader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockHashesSubmittedByClient\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGenesisBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"getHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDifficulty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLongestChainEndpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequiredStakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequiredVerificationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"}],\"name\":\"isBlockConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isHeaderStored\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"}],\"name\":\"submitBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rlpHeaders\",\"type\":\"bytes\"}],\"name\":\"submitBlockBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedReceipt\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyReceipt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedState\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedTx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyTransaction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TestimoniumBin is the compiled bytecode used for deploying new contracts.
var TestimoniumBin = ""


// DeployTestimonium deploys a new Ethereum contract, binding an instance of Testimonium to it.
func DeployTestimonium(auth *bind.TransactOpts, backend bind.ContractBackend, _rlpHeader []byte, totalDifficulty *big.Int, _ethashContractAddr common.Address) (common.Address, *types.Transaction, *Testimonium, error) {
	parsed, err := abi.JSON(strings.NewReader(TestimoniumABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TestimoniumBin), backend, _rlpHeader, totalDifficulty, _ethashContractAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Testimonium{TestimoniumCaller: TestimoniumCaller{contract: contract}, TestimoniumTransactor: TestimoniumTransactor{contract: contract}, TestimoniumFilterer: TestimoniumFilterer{contract: contract}}, nil
}

// Testimonium is an auto generated Go binding around an Ethereum contract.
type Testimonium struct {
	TestimoniumCaller     // Read-only binding to the contract
	TestimoniumTransactor // Write-only binding to the contract
	TestimoniumFilterer   // Log filterer for contract events
}

// TestimoniumCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestimoniumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestimoniumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestimoniumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestimoniumSession struct {
	Contract     *Testimonium      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestimoniumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestimoniumCallerSession struct {
	Contract *TestimoniumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TestimoniumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestimoniumTransactorSession struct {
	Contract     *TestimoniumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TestimoniumRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestimoniumRaw struct {
	Contract *Testimonium // Generic contract binding to access the raw methods on
}

// TestimoniumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestimoniumCallerRaw struct {
	Contract *TestimoniumCaller // Generic read-only contract binding to access the raw methods on
}

// TestimoniumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestimoniumTransactorRaw struct {
	Contract *TestimoniumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestimonium creates a new instance of Testimonium, bound to a specific deployed contract.
func NewTestimonium(address common.Address, backend bind.ContractBackend) (*Testimonium, error) {
	contract, err := bindTestimonium(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Testimonium{TestimoniumCaller: TestimoniumCaller{contract: contract}, TestimoniumTransactor: TestimoniumTransactor{contract: contract}, TestimoniumFilterer: TestimoniumFilterer{contract: contract}}, nil
}

// NewTestimoniumCaller creates a new read-only instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumCaller(address common.Address, caller bind.ContractCaller) (*TestimoniumCaller, error) {
	contract, err := bindTestimonium(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestimoniumCaller{contract: contract}, nil
}

// NewTestimoniumTransactor creates a new write-only instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumTransactor(address common.Address, transactor bind.ContractTransactor) (*TestimoniumTransactor, error) {
	contract, err := bindTestimonium(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestimoniumTransactor{contract: contract}, nil
}

// NewTestimoniumFilterer creates a new log filterer instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumFilterer(address common.Address, filterer bind.ContractFilterer) (*TestimoniumFilterer, error) {
	contract, err := bindTestimonium(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestimoniumFilterer{contract: contract}, nil
}

// bindTestimonium binds a generic wrapper to an already deployed contract.
func bindTestimonium(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestimoniumABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Testimonium *TestimoniumRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Testimonium.Contract.TestimoniumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Testimonium *TestimoniumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Testimonium.Contract.TestimoniumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Testimonium *TestimoniumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Testimonium.Contract.TestimoniumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Testimonium *TestimoniumCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Testimonium.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Testimonium *TestimoniumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Testimonium.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Testimonium *TestimoniumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Testimonium.Contract.contract.Transact(opts, method, params...)
}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Testimonium *TestimoniumCaller) GetBlockHashesSubmittedByClient(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getBlockHashesSubmittedByClient")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Testimonium *TestimoniumSession) GetBlockHashesSubmittedByClient() ([][32]byte, error) {
	return _Testimonium.Contract.GetBlockHashesSubmittedByClient(&_Testimonium.CallOpts)
}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Testimonium *TestimoniumCallerSession) GetBlockHashesSubmittedByClient() ([][32]byte, error) {
	return _Testimonium.Contract.GetBlockHashesSubmittedByClient(&_Testimonium.CallOpts)
}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Testimonium *TestimoniumCaller) GetGenesisBlockHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getGenesisBlockHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Testimonium *TestimoniumSession) GetGenesisBlockHash() ([32]byte, error) {
	return _Testimonium.Contract.GetGenesisBlockHash(&_Testimonium.CallOpts)
}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Testimonium *TestimoniumCallerSession) GetGenesisBlockHash() ([32]byte, error) {
	return _Testimonium.Contract.GetGenesisBlockHash(&_Testimonium.CallOpts)
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Testimonium *TestimoniumCaller) GetHeader(opts *bind.CallOpts, blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getHeader", blockHash)

	outstruct := new(struct {
		Hash            [32]byte
		BlockNumber     *big.Int
		TotalDifficulty *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = out[0].([32]byte)
	outstruct.BlockNumber = out[1].(*big.Int)
	outstruct.TotalDifficulty = out[2].(*big.Int)

	return *outstruct, err

}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Testimonium *TestimoniumSession) GetHeader(blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	return _Testimonium.Contract.GetHeader(&_Testimonium.CallOpts, blockHash)
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Testimonium *TestimoniumCallerSession) GetHeader(blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	return _Testimonium.Contract.GetHeader(&_Testimonium.CallOpts, blockHash)
}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Testimonium *TestimoniumCaller) GetLongestChainEndpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getLongestChainEndpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Testimonium *TestimoniumSession) GetLongestChainEndpoint() ([32]byte, error) {
	return _Testimonium.Contract.GetLongestChainEndpoint(&_Testimonium.CallOpts)
}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Testimonium *TestimoniumCallerSession) GetLongestChainEndpoint() ([32]byte, error) {
	return _Testimonium.Contract.GetLongestChainEndpoint(&_Testimonium.CallOpts)
}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Testimonium *TestimoniumCaller) GetRequiredStakePerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getRequiredStakePerBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Testimonium *TestimoniumSession) GetRequiredStakePerBlock() (*big.Int, error) {
	return _Testimonium.Contract.GetRequiredStakePerBlock(&_Testimonium.CallOpts)
}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Testimonium *TestimoniumCallerSession) GetRequiredStakePerBlock() (*big.Int, error) {
	return _Testimonium.Contract.GetRequiredStakePerBlock(&_Testimonium.CallOpts)
}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Testimonium *TestimoniumCaller) GetRequiredVerificationFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getRequiredVerificationFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Testimonium *TestimoniumSession) GetRequiredVerificationFee() (*big.Int, error) {
	return _Testimonium.Contract.GetRequiredVerificationFee(&_Testimonium.CallOpts)
}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Testimonium *TestimoniumCallerSession) GetRequiredVerificationFee() (*big.Int, error) {
	return _Testimonium.Contract.GetRequiredVerificationFee(&_Testimonium.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Testimonium *TestimoniumCaller) GetStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Testimonium *TestimoniumSession) GetStake() (*big.Int, error) {
	return _Testimonium.Contract.GetStake(&_Testimonium.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Testimonium *TestimoniumCallerSession) GetStake() (*big.Int, error) {
	return _Testimonium.Contract.GetStake(&_Testimonium.CallOpts)
}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Testimonium *TestimoniumCaller) IsHeaderStored(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "isHeaderStored", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Testimonium *TestimoniumSession) IsHeaderStored(hash [32]byte) (bool, error) {
	return _Testimonium.Contract.IsHeaderStored(&_Testimonium.CallOpts, hash)
}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Testimonium *TestimoniumCallerSession) IsHeaderStored(hash [32]byte) (bool, error) {
	return _Testimonium.Contract.IsHeaderStored(&_Testimonium.CallOpts, hash)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Testimonium *TestimoniumTransactor) DepositStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "depositStake", amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Testimonium *TestimoniumSession) DepositStake(amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DepositStake(&_Testimonium.TransactOpts, amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Testimonium *TestimoniumTransactorSession) DepositStake(amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DepositStake(&_Testimonium.TransactOpts, amount)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfbdf930d.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumTransactor) DisputeBlockHeader(opts *bind.TransactOpts, rlpHeader []byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "disputeBlockHeader", rlpHeader, rlpParent, dataSetLookup, witnessForLookup)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfbdf930d.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumSession) DisputeBlockHeader(rlpHeader []byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DisputeBlockHeader(&_Testimonium.TransactOpts, rlpHeader, rlpParent, dataSetLookup, witnessForLookup)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfbdf930d.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumTransactorSession) DisputeBlockHeader(rlpHeader []byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DisputeBlockHeader(&_Testimonium.TransactOpts, rlpHeader, rlpParent, dataSetLookup, witnessForLookup)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Testimonium *TestimoniumTransactor) IsBlockConfirmed(opts *bind.TransactOpts, feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "isBlockConfirmed", feeInWei, blockHash, noOfConfirmations)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Testimonium *TestimoniumSession) IsBlockConfirmed(feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Testimonium.Contract.IsBlockConfirmed(&_Testimonium.TransactOpts, feeInWei, blockHash, noOfConfirmations)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Testimonium *TestimoniumTransactorSession) IsBlockConfirmed(feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Testimonium.Contract.IsBlockConfirmed(&_Testimonium.TransactOpts, feeInWei, blockHash, noOfConfirmations)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Testimonium *TestimoniumTransactor) SubmitBlock(opts *bind.TransactOpts, rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "submitBlock", rlpHeader)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Testimonium *TestimoniumSession) SubmitBlock(rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitBlock(&_Testimonium.TransactOpts, rlpHeader)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Testimonium *TestimoniumTransactorSession) SubmitBlock(rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitBlock(&_Testimonium.TransactOpts, rlpHeader)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Testimonium *TestimoniumTransactor) SubmitBlockBatch(opts *bind.TransactOpts, _rlpHeaders []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "submitBlockBatch", _rlpHeaders)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Testimonium *TestimoniumSession) SubmitBlockBatch(_rlpHeaders []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitBlockBatch(&_Testimonium.TransactOpts, _rlpHeaders)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Testimonium *TestimoniumTransactorSession) SubmitBlockBatch(_rlpHeaders []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitBlockBatch(&_Testimonium.TransactOpts, _rlpHeaders)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactor) VerifyReceipt(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "verifyReceipt", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyReceipt(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyReceipt(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactorSession) VerifyReceipt(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyReceipt(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactor) VerifyState(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "verifyState", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyState(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyState(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactorSession) VerifyState(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyState(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactor) VerifyTransaction(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "verifyTransaction", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyTransaction(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyTransaction(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactorSession) VerifyTransaction(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyTransaction(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Testimonium *TestimoniumTransactor) WithdrawStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "withdrawStake", amount)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Testimonium *TestimoniumSession) WithdrawStake(amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.WithdrawStake(&_Testimonium.TransactOpts, amount)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Testimonium *TestimoniumTransactorSession) WithdrawStake(amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.WithdrawStake(&_Testimonium.TransactOpts, amount)
}

// TestimoniumDisputeBlockIterator is returned from FilterDisputeBlock and is used to iterate over the raw logs and unpacked data for DisputeBlock events raised by the Testimonium contract.
type TestimoniumDisputeBlockIterator struct {
	Event *TestimoniumDisputeBlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumDisputeBlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumDisputeBlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumDisputeBlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumDisputeBlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumDisputeBlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumDisputeBlock represents a DisputeBlock event raised by the Testimonium contract.
type TestimoniumDisputeBlock struct {
	ReturnCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDisputeBlock is a free log retrieval operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Testimonium *TestimoniumFilterer) FilterDisputeBlock(opts *bind.FilterOpts) (*TestimoniumDisputeBlockIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "DisputeBlock")
	if err != nil {
		return nil, err
	}
	return &TestimoniumDisputeBlockIterator{contract: _Testimonium.contract, event: "DisputeBlock", logs: logs, sub: sub}, nil
}

// WatchDisputeBlock is a free log subscription operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Testimonium *TestimoniumFilterer) WatchDisputeBlock(opts *bind.WatchOpts, sink chan<- *TestimoniumDisputeBlock) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "DisputeBlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumDisputeBlock)
				if err := _Testimonium.contract.UnpackLog(event, "DisputeBlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputeBlock is a log parse operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Testimonium *TestimoniumFilterer) ParseDisputeBlock(log types.Log) (*TestimoniumDisputeBlock, error) {
	event := new(TestimoniumDisputeBlock)
	if err := _Testimonium.contract.UnpackLog(event, "DisputeBlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumPoWValidationResultIterator is returned from FilterPoWValidationResult and is used to iterate over the raw logs and unpacked data for PoWValidationResult events raised by the Testimonium contract.
type TestimoniumPoWValidationResultIterator struct {
	Event *TestimoniumPoWValidationResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumPoWValidationResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumPoWValidationResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumPoWValidationResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumPoWValidationResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumPoWValidationResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumPoWValidationResult represents a PoWValidationResult event raised by the Testimonium contract.
type TestimoniumPoWValidationResult struct {
	ReturnCode *big.Int
	ErrorInfo  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPoWValidationResult is a free log retrieval operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) FilterPoWValidationResult(opts *bind.FilterOpts) (*TestimoniumPoWValidationResultIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "PoWValidationResult")
	if err != nil {
		return nil, err
	}
	return &TestimoniumPoWValidationResultIterator{contract: _Testimonium.contract, event: "PoWValidationResult", logs: logs, sub: sub}, nil
}

// WatchPoWValidationResult is a free log subscription operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) WatchPoWValidationResult(opts *bind.WatchOpts, sink chan<- *TestimoniumPoWValidationResult) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "PoWValidationResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumPoWValidationResult)
				if err := _Testimonium.contract.UnpackLog(event, "PoWValidationResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePoWValidationResult is a log parse operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) ParsePoWValidationResult(log types.Log) (*TestimoniumPoWValidationResult, error) {
	event := new(TestimoniumPoWValidationResult)
	if err := _Testimonium.contract.UnpackLog(event, "PoWValidationResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumRemoveBranchIterator is returned from FilterRemoveBranch and is used to iterate over the raw logs and unpacked data for RemoveBranch events raised by the Testimonium contract.
type TestimoniumRemoveBranchIterator struct {
	Event *TestimoniumRemoveBranch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumRemoveBranchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumRemoveBranch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumRemoveBranch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumRemoveBranchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumRemoveBranchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumRemoveBranch represents a RemoveBranch event raised by the Testimonium contract.
type TestimoniumRemoveBranch struct {
	Root [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemoveBranch is a free log retrieval operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) FilterRemoveBranch(opts *bind.FilterOpts) (*TestimoniumRemoveBranchIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "RemoveBranch")
	if err != nil {
		return nil, err
	}
	return &TestimoniumRemoveBranchIterator{contract: _Testimonium.contract, event: "RemoveBranch", logs: logs, sub: sub}, nil
}

// WatchRemoveBranch is a free log subscription operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) WatchRemoveBranch(opts *bind.WatchOpts, sink chan<- *TestimoniumRemoveBranch) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "RemoveBranch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumRemoveBranch)
				if err := _Testimonium.contract.UnpackLog(event, "RemoveBranch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveBranch is a log parse operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) ParseRemoveBranch(log types.Log) (*TestimoniumRemoveBranch, error) {
	event := new(TestimoniumRemoveBranch)
	if err := _Testimonium.contract.UnpackLog(event, "RemoveBranch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumSubmitBlockIterator is returned from FilterSubmitBlock and is used to iterate over the raw logs and unpacked data for SubmitBlock events raised by the Testimonium contract.
type TestimoniumSubmitBlockIterator struct {
	Event *TestimoniumSubmitBlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumSubmitBlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumSubmitBlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumSubmitBlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumSubmitBlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumSubmitBlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumSubmitBlock represents a SubmitBlock event raised by the Testimonium contract.
type TestimoniumSubmitBlock struct {
	BlockHash [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSubmitBlock is a free log retrieval operation binding the contract event 0x1cf94b307af0c800807d60a4e4bdc5145d6df32ad1c9e0cd3a49865e62c3820e.
//
// Solidity: event SubmitBlock(bytes32 blockHash)
func (_Testimonium *TestimoniumFilterer) FilterSubmitBlock(opts *bind.FilterOpts) (*TestimoniumSubmitBlockIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "SubmitBlock")
	if err != nil {
		return nil, err
	}
	return &TestimoniumSubmitBlockIterator{contract: _Testimonium.contract, event: "SubmitBlock", logs: logs, sub: sub}, nil
}

// WatchSubmitBlock is a free log subscription operation binding the contract event 0x1cf94b307af0c800807d60a4e4bdc5145d6df32ad1c9e0cd3a49865e62c3820e.
//
// Solidity: event SubmitBlock(bytes32 blockHash)
func (_Testimonium *TestimoniumFilterer) WatchSubmitBlock(opts *bind.WatchOpts, sink chan<- *TestimoniumSubmitBlock) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "SubmitBlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumSubmitBlock)
				if err := _Testimonium.contract.UnpackLog(event, "SubmitBlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitBlock is a log parse operation binding the contract event 0x1cf94b307af0c800807d60a4e4bdc5145d6df32ad1c9e0cd3a49865e62c3820e.
//
// Solidity: event SubmitBlock(bytes32 blockHash)
func (_Testimonium *TestimoniumFilterer) ParseSubmitBlock(log types.Log) (*TestimoniumSubmitBlock, error) {
	event := new(TestimoniumSubmitBlock)
	if err := _Testimonium.contract.UnpackLog(event, "SubmitBlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumVerifyReceiptIterator is returned from FilterVerifyReceipt and is used to iterate over the raw logs and unpacked data for VerifyReceipt events raised by the Testimonium contract.
type TestimoniumVerifyReceiptIterator struct {
	Event *TestimoniumVerifyReceipt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumVerifyReceiptIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumVerifyReceipt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumVerifyReceipt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumVerifyReceiptIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumVerifyReceiptIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumVerifyReceipt represents a VerifyReceipt event raised by the Testimonium contract.
type TestimoniumVerifyReceipt struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyReceipt is a free log retrieval operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Testimonium *TestimoniumFilterer) FilterVerifyReceipt(opts *bind.FilterOpts) (*TestimoniumVerifyReceiptIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "VerifyReceipt")
	if err != nil {
		return nil, err
	}
	return &TestimoniumVerifyReceiptIterator{contract: _Testimonium.contract, event: "VerifyReceipt", logs: logs, sub: sub}, nil
}

// WatchVerifyReceipt is a free log subscription operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Testimonium *TestimoniumFilterer) WatchVerifyReceipt(opts *bind.WatchOpts, sink chan<- *TestimoniumVerifyReceipt) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "VerifyReceipt")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumVerifyReceipt)
				if err := _Testimonium.contract.UnpackLog(event, "VerifyReceipt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyReceipt is a log parse operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Testimonium *TestimoniumFilterer) ParseVerifyReceipt(log types.Log) (*TestimoniumVerifyReceipt, error) {
	event := new(TestimoniumVerifyReceipt)
	if err := _Testimonium.contract.UnpackLog(event, "VerifyReceipt", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumVerifyStateIterator is returned from FilterVerifyState and is used to iterate over the raw logs and unpacked data for VerifyState events raised by the Testimonium contract.
type TestimoniumVerifyStateIterator struct {
	Event *TestimoniumVerifyState // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumVerifyStateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumVerifyState)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumVerifyState)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumVerifyStateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumVerifyStateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumVerifyState represents a VerifyState event raised by the Testimonium contract.
type TestimoniumVerifyState struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyState is a free log retrieval operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Testimonium *TestimoniumFilterer) FilterVerifyState(opts *bind.FilterOpts) (*TestimoniumVerifyStateIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "VerifyState")
	if err != nil {
		return nil, err
	}
	return &TestimoniumVerifyStateIterator{contract: _Testimonium.contract, event: "VerifyState", logs: logs, sub: sub}, nil
}

// WatchVerifyState is a free log subscription operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Testimonium *TestimoniumFilterer) WatchVerifyState(opts *bind.WatchOpts, sink chan<- *TestimoniumVerifyState) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "VerifyState")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumVerifyState)
				if err := _Testimonium.contract.UnpackLog(event, "VerifyState", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyState is a log parse operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Testimonium *TestimoniumFilterer) ParseVerifyState(log types.Log) (*TestimoniumVerifyState, error) {
	event := new(TestimoniumVerifyState)
	if err := _Testimonium.contract.UnpackLog(event, "VerifyState", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumVerifyTransactionIterator is returned from FilterVerifyTransaction and is used to iterate over the raw logs and unpacked data for VerifyTransaction events raised by the Testimonium contract.
type TestimoniumVerifyTransactionIterator struct {
	Event *TestimoniumVerifyTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumVerifyTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumVerifyTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumVerifyTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumVerifyTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumVerifyTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumVerifyTransaction represents a VerifyTransaction event raised by the Testimonium contract.
type TestimoniumVerifyTransaction struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyTransaction is a free log retrieval operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Testimonium *TestimoniumFilterer) FilterVerifyTransaction(opts *bind.FilterOpts) (*TestimoniumVerifyTransactionIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "VerifyTransaction")
	if err != nil {
		return nil, err
	}
	return &TestimoniumVerifyTransactionIterator{contract: _Testimonium.contract, event: "VerifyTransaction", logs: logs, sub: sub}, nil
}

// WatchVerifyTransaction is a free log subscription operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Testimonium *TestimoniumFilterer) WatchVerifyTransaction(opts *bind.WatchOpts, sink chan<- *TestimoniumVerifyTransaction) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "VerifyTransaction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumVerifyTransaction)
				if err := _Testimonium.contract.UnpackLog(event, "VerifyTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyTransaction is a log parse operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Testimonium *TestimoniumFilterer) ParseVerifyTransaction(log types.Log) (*TestimoniumVerifyTransaction, error) {
	event := new(TestimoniumVerifyTransaction)
	if err := _Testimonium.contract.UnpackLog(event, "VerifyTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumWithdrawStakeIterator is returned from FilterWithdrawStake and is used to iterate over the raw logs and unpacked data for WithdrawStake events raised by the Testimonium contract.
type TestimoniumWithdrawStakeIterator struct {
	Event *TestimoniumWithdrawStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumWithdrawStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumWithdrawStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumWithdrawStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumWithdrawStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumWithdrawStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumWithdrawStake represents a WithdrawStake event raised by the Testimonium contract.
type TestimoniumWithdrawStake struct {
	Client         common.Address
	WithdrawnStake *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawStake is a free log retrieval operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Testimonium *TestimoniumFilterer) FilterWithdrawStake(opts *bind.FilterOpts) (*TestimoniumWithdrawStakeIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "WithdrawStake")
	if err != nil {
		return nil, err
	}
	return &TestimoniumWithdrawStakeIterator{contract: _Testimonium.contract, event: "WithdrawStake", logs: logs, sub: sub}, nil
}

// WatchWithdrawStake is a free log subscription operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Testimonium *TestimoniumFilterer) WatchWithdrawStake(opts *bind.WatchOpts, sink chan<- *TestimoniumWithdrawStake) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "WithdrawStake")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumWithdrawStake)
				if err := _Testimonium.contract.UnpackLog(event, "WithdrawStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawStake is a log parse operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Testimonium *TestimoniumFilterer) ParseWithdrawStake(log types.Log) (*TestimoniumWithdrawStake, error) {
	event := new(TestimoniumWithdrawStake)
	if err := _Testimonium.contract.UnpackLog(event, "WithdrawStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
