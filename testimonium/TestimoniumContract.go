// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package testimonium

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TestimoniumMetaData contains all meta data concerning the Testimonium contract.
var TestimoniumMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"totalDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ethashContractAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnCode\",\"type\":\"uint256\"}],\"name\":\"DisputeBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errorInfo\",\"type\":\"uint256\"}],\"name\":\"PoWValidationResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RemoveBranch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"SubmitBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyReceipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"VerifyTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnStake\",\"type\":\"uint256\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"rlpHeaderHashWithoutNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"rlpParent\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"name\":\"disputeBlockHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockHashesSubmittedByClient\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGenesisBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"getHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDifficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLongestChainEndpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredStakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredVerificationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"}],\"name\":\"isBlockConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isHeaderStored\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"}],\"name\":\"submitBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rlpHeaders\",\"type\":\"bytes\"}],\"name\":\"submitBlockBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedReceipt\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyReceipt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedState\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedTx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyTransaction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260008054600160a01b600160e01b03191690553480156200002457600080fd5b50604051620051b9380380620051b9833981016040819052620000479162000b33565b825160208401208390839083906000620000618562000279565b9050620000b8604080516080808201835260008083526020808401829052838501829052845160c08101865282815290810182905293840181905260608481018290529184015260a0830181905290919082015290565b6040810183905260a082015162ffffff1681526001600160e81b038516602080830191909152600080546060840151600160a01b9091046001600160401b03169201919091526004805460018082018355928290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01859055546200013f919062000c44565b606080830180516001600160401b0393841690528051428416604091820152600087815260036020818152918390208751838901516001600160e81b031663010000000262ffffff9091161781558388015160018201559351805160028601805483860151968401518a16600160801b02600160801b600160c01b0319978b1668010000000000000000026001600160801b031990921693909a16929092179190911794909416969096178355938501519383019390935560808401516004830180546001600160a01b039092166001600160a01b031990921691909117905560a08401518051869593946200023d92600587019291019062000a99565b50505060018590555050600080546001600160a01b0319166001600160a01b039590951694909417909355506002555062000dca945050505050565b604080516101a08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820192909252610180810191909152604080516101a08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201839052610140820183905261016082019290925261018081019190915260006200037c6200036b856200062660201b620008721760201c565b6200065360201b6200089f1760201c565b905060005b6200039782620006cc60201b6200090b1760201c565b156200061d5780620003d657620003ce620003bd83620006f260201b6200092f1760201c565b6200075660201b6200098c1760201c565b835262000608565b80600114156200040557620003fa620003bd83620006f260201b6200092f1760201c565b602084015262000608565b8060031415620004345762000429620003bd83620006f260201b6200092f1760201c565b604084015262000608565b8060041415620004635762000458620003bd83620006f260201b6200092f1760201c565b606084015262000608565b8060051415620004925762000487620003bd83620006f260201b6200092f1760201c565b608084015262000608565b8060071415620004c257620004b6620003bd83620006f260201b6200092f1760201c565b61016084015262000608565b8060081415620004f157620004e6620003bd83620006f260201b6200092f1760201c565b60a084015262000608565b8060091415620005205762000515620003bd83620006f260201b6200092f1760201c565b60c084015262000608565b80600a14156200054f5762000544620003bd83620006f260201b6200092f1760201c565b60e084015262000608565b80600b14156200057f5762000573620003bd83620006f260201b6200092f1760201c565b61012084015262000608565b80600c1415620005c057620005b4620005a383620006f260201b6200092f1760201c565b620007e060201b62000a071760201c565b61018084015262000608565b80600e1415620005f057620005e4620003bd83620006f260201b6200092f1760201c565b61014084015262000608565b6200060682620006f260201b6200092f1760201c565b505b80620006148162000c5e565b91505062000381565b50909392505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080516080810182526000918101828152606082018390528152602081019190915262000681826200088f565b6200068b57600080fd5b6000620006a28360200151620008ca60201b60201c565b8360200151620006b3919062000c7c565b6040805180820190915293845260208401525090919050565b80518051602082015160009291620006e49162000c7c565b836020015110915050919050565b60408051808201909152600080825260208201526200071182620006cc565b6200071b57600080fd5b602082015160006200072d8262000959565b90506200073b818362000c7c565b60209485015260408051808201909152908152928301525090565b8051600090158015906200076c57508151602110155b6200077657600080fd5b60006200078d8360200151620008ca60201b60201c565b90506000818460000151620007a3919062000c44565b9050600080838660200151620007ba919062000c7c565b9050805191506020831015620007d757826020036101000a820491505b50949350505050565b8051606090620007ef57600080fd5b6000620008068360200151620008ca60201b60201c565b905060008184600001516200081c919062000c44565b90506000816001600160401b038111156200083b576200083b62000b00565b6040519080825280601f01601f19166020018201604052801562000866576020820181803683370190505b5090506000816020019050620007d784876020015162000887919062000c7c565b828562000a0f565b8051600090620008a157506000919050565b6020820151805160001a9060c0821015620008c0575060009392505050565b5060019392505050565b8051600090811a6080811015620008e45750600092915050565b60b881108062000901575060c0811080159062000901575060f881105b15620009105750600192915050565b60c08110156200094b5762000928600160b862000c97565b620009379060ff168262000c44565b6200094490600162000c7c565b9392505050565b62000928600160f862000c97565b80516000908190811a608081101562000976576001915062000a08565b60b8811015620009a2576200098d60808262000c44565b6200099a90600162000c7c565b915062000a08565b60c0811015620009d15760b78103600185019450806020036101000a8551046001820181019350505062000a08565b60f8811015620009e8576200098d60c08262000c44565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8062000a1a57505050565b6020811062000a5a578251825262000a3460208462000c7c565b925062000a4360208362000c7c565b915062000a5260208262000c44565b905062000a1a565b6000600162000a6b83602062000c44565b62000a799061010062000dbc565b62000a85919062000c44565b935183518516941916939093179091525050565b82805482825590600052602060002090810192821562000ad7579160200282015b8281111562000ad757825182559160200191906001019062000aba565b5062000ae592915062000ae9565b5090565b5b8082111562000ae5576000815560010162000aea565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811462000b2e57600080fd5b919050565b60008060006060848603121562000b4957600080fd5b83516001600160401b038082111562000b6157600080fd5b818601915086601f83011262000b7657600080fd5b81518181111562000b8b5762000b8b62000b00565b604051601f8201601f19908116603f0116810190838211818310171562000bb65762000bb662000b00565b8160405282815260209350898484870101111562000bd357600080fd5b600091505b8282101562000bf7578482018401518183018501529083019062000bd8565b8282111562000c095760008484830101525b809750505050808601519350505062000c256040850162000b16565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b60008282101562000c595762000c5962000c2e565b500390565b600060001982141562000c755762000c7562000c2e565b5060010190565b6000821982111562000c925762000c9262000c2e565b500190565b600060ff821660ff84168082101562000cb45762000cb462000c2e565b90039392505050565b600181815b8085111562000cfe57816000190482111562000ce25762000ce262000c2e565b8085161562000cf057918102915b93841c939080029062000cc2565b509250929050565b60008262000d175750600162000db6565b8162000d265750600062000db6565b816001811462000d3f576002811462000d4a5762000d6a565b600191505062000db6565b60ff84111562000d5e5762000d5e62000c2e565b50506001821b62000db6565b5060208310610133831016604e8410600b841016171562000d8f575081810a62000db6565b62000d9b838362000cbd565b806000190482111562000db25762000db262000c2e565b0290505b92915050565b600062000944838362000d06565b6143df8062000dda6000396000f3fe6080604052600436106100fe5760003560e01c8063b961587811610095578063dfd6dff811610064578063dfd6dff8146102ca578063ed315dfa146102dd578063f06dab9e146102f0578063fc0e3d9014610312578063fd62f6551461033457600080fd5b8063b9615878146101ec578063cb82cc8f14610253578063d0f0923b14610266578063d5107381146102aa57600080fd5b80633452e2db116100d15780633452e2db1461017e5780635e29b7da14610199578063acef3a1e146101be578063addd9b38146101d957600080fd5b80630d6501a6146101035780631b2e10541461012757806325d5971f1461014957806329a12be914610169575b600080fd5b34801561010f57600080fd5b506001545b6040519081526020015b60405180910390f35b34801561013357600080fd5b50610147610142366004613a88565b610354565b005b34801561015557600080fd5b50610147610164366004613abc565b6103a0565b34801561017557600080fd5b50600254610114565b34801561018a57600080fd5b5067016345785d8a0000610114565b6101ac6101a7366004613aeb565b6104be565b60405160ff909116815260200161011e565b3480156101ca57600080fd5b50670de0b6b3a7640000610114565b6101ac6101e7366004613aeb565b610518565b3480156101f857600080fd5b50610238610207366004613abc565b600090815260036020526040902060018101549054909162ffffff821691630100000090046001600160e81b031690565b6040805193845260208401929092529082015260600161011e565b610147610261366004613abc565b610561565b34801561027257600080fd5b5061029a610281366004613abc565b60009081526003602052604090205462ffffff16151590565b604051901515815260200161011e565b3480156102b657600080fd5b506101476102c5366004613a88565b6105ae565b61029a6102d8366004613bb0565b610689565b6101ac6102eb366004613aeb565b6106e4565b3480156102fc57600080fd5b5061030561072d565b60405161011e9190613be5565b34801561031e57600080fd5b5033600090815260066020526040902054610114565b34801561034057600080fd5b5061014761034f366004613ca8565b61078e565b600061036761036283610872565b61089f565b90505b6103738161090b565b1561039c57600061038b6103868361092f565b610a07565b9050610396816105ae565b5061036a565b5050565b3360009081526006602052604090205481111561040f5760405162461bcd60e51b815260206004820152602260248201527f616d6f756e7420686967686572207468616e206465706f7369746564207374616044820152616b6560f01b60648201526084015b60405180910390fd5b8061041933610aa3565b10610465576104283382610b28565b60408051338152602081018390527f141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec91015b60405180910390a150565b61046e33610b98565b508061047933610aa3565b10610488576104283382610b28565b60408051338152600060208201527f141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec910161045a565b6000806104d16001898989898989610d35565b60405160ff821681529091507f567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6906020015b60405180910390a190505b9695505050505050565b60008061052b6003898989898989610d35565b60405160ff821681529091507fb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce90602001610503565b3481146105805760405162461bcd60e51b815260040161040690613d5e565b3360009081526006602052604090205461059b903490613dc3565b3360009081526006602052604090205550565b670de0b6b3a76400006105c033610aa3565b1015610619576105cf33610b98565b50670de0b6b3a76400006105e233610aa3565b101561061957604051600081527f1cf94b307af0c800807d60a4e4bdc5145d6df32ad1c9e0cd3a49865e62c3820e9060200161045a565b60006106258233610e8f565b33600090815260056020908152604080832080546001810182559084529190922001829055519091507f1cf94b307af0c800807d60a4e4bdc5145d6df32ad1c9e0cd3a49865e62c3820e9061067d9083815260200190565b60405180910390a15050565b60003484146106aa5760405162461bcd60e51b815260040161040690613d5e565b67016345785d8a00008410156106d25760405162461bcd60e51b815260040161040690613ddb565b6106dc8383611369565b949350505050565b6000806106f76002898989898989610d35565b60405160ff821681529091507f0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf79090602001610503565b3360009081526005602090815260409182902080548351818402810184019094528084526060939283018282801561078457602002820191906000526020600020905b815481526020019060010190808311610770575b5050505050905090565b600061079d868686868661144c565b90506000805b82518110156108445760008382815181106107c0576107c0613e21565b60200260200101519050670de0b6b3a764000060066000836001600160a01b03166001600160a01b03168152602001908152602001600020546108039190613e37565b6001600160a01b03821660009081526006602052604090205561082e670de0b6b3a764000084613dc3565b925050808061083c90613e4e565b9150506107a3565b503360009081526006602052604081208054839290610864908490613dc3565b909155505050505050505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b60408051608081018252600091810182815260608201839052815260208101919091526108cb826114e0565b6108d457600080fd5b60006108e38360200151611519565b83602001516108f29190613dc3565b6040805180820190915293845260208401525090919050565b8051805160208201516000929161092191613dc3565b836020015110915050919050565b604080518082019091526000808252602082015261094c8261090b565b61095557600080fd5b6020820151600061096582611594565b90506109718183613dc3565b60209485015260408051808201909152908152928301525090565b8051600090158015906109a157508151602110155b6109aa57600080fd5b60006109b98360200151611519565b905060008184600001516109cd9190613e37565b90506000808386602001516109e29190613dc3565b90508051915060208310156109fe57826020036101000a820491505b50949350505050565b8051606090610a1557600080fd5b6000610a248360200151611519565b90506000818460000151610a389190613e37565b90506000816001600160401b03811115610a5457610a546139d3565b6040519080825280601f01601f191660200182016040528015610a7e576020820181803683370190505b50905060008160200190506109fe848760200151610a9c9190613dc3565b8285611638565b6001600160a01b0381166000908152600560205260408120548190610ad190670de0b6b3a764000090613e69565b6001600160a01b038416600090815260066020526040902054909150811115610afd5750600092915050565b6001600160a01b038316600090815260066020526040902054610b21908290613e37565b9392505050565b6001600160a01b038216600090815260066020526040902054610b4c908290613e37565b6001600160a01b038316600081815260066020526040808220939093559151909183156108fc02918491818181858888f19350505050158015610b93573d6000803e3d6000fd5b505050565b600080805b6001600160a01b038416600090815260056020526040902054811015610d2e576001600160a01b0384166000908152600560205260408120805483908110610be757610be7613e21565b90600052602060002001549050610c118160009081526003602052604090205462ffffff16151590565b1580610c215750610c21816116b3565b15610d1a576001600160a01b038516600090815260056020526040812054610c4b90600190613e37565b6001600160a01b038716600090815260056020526040902080549192509082908110610c7957610c79613e21565b906000526020600020015460056000886001600160a01b03166001600160a01b031681526020019081526020016000208481548110610cba57610cba613e21565b60009182526020808320909101929092556001600160a01b0388168152600590915260409020805480610cef57610cef613e88565b60019003818190600052602060002001600090559055600184610d129190613dc3565b935050610d28565b81610d2481613e4e565b9250505b50610b9d565b5092915050565b6000348714610d565760405162461bcd60e51b815260040161040690613d5e565b67016345785d8a0000871015610d7e5760405162461bcd60e51b815260040161040690613ddb565b85516020870120600060ff8a1660011415610db057610da98288888888610da48e6116db565b61173d565b9050610e32565b60ff8a1660021415610dcd57610da98288888888610da48e61191f565b60ff8a1660031415610dea57610da98288888888610da48e611972565b60405162461bcd60e51b815260206004820152601960248201527f556e6b6e6f776e20766572696669636174696f6e2074797065000000000000006044820152606401610406565b6000610e3d836119c5565b6040519096508695506001600160a01b03861694508f156108fc0293508f925090506000818181858888f19350505050158015610e7e573d6000803e3d6000fd5b50919b9a5050505050505050505050565b6000610ee5604080516080808201835260008083526020808401829052838501829052845160c08101865282815290810182905293840181905260608481018290529184015260a0830181905290919082015290565b83516020850120610f098160009081526003602052604090205462ffffff16151590565b15610f4d5760405162461bcd60e51b8152602060048201526014602482015273626c6f636b20616c72656164792065786973747360601b6044820152606401610406565b6000806000610f5b88611aaa565b600083815260036020526040902054929550909350915062ffffff16610fbb5760405162461bcd60e51b81526020600482015260156024820152741c185c995b9d08191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610406565b600083815260036020908152604080832060058101805460018101825590855292909320909101869055860185905262ffffff83168652805461100f908390630100000090046001600160e81b0316613dc3565b6001600160e81b0316602087015261102961012c42613dc3565b6060870180516001600160401b03928316604090910152516001600160a01b038a1660809091015260028201546004549116108015611093575060028101546004805486926001600160401b031690811061108657611086613e21565b9060005260206000200154145b1561111e57600281015460608701516001600160401b03600160401b8304811660209092019190915260408801516004805491939092169081106110d9576110d9613e21565b600091825260209091200155600281018054606080890180516001600160401b038416905267ffffffffffffffff19909216909255600383015490519091015261122c565b6001600060148282829054906101000a90046001600160401b03166111439190613e9e565b82546101009290920a6001600160401b038181021990931691831602179091556000805460608a0151600160a01b90910490921660209092019190915260408801516004805460018181018355938290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0191909155546111c59250613e37565b606080880180516001600160401b0390931690925290510184905260058101546002141561122c5761122c600360008360020160030160008154811061120d5761120d613e21565b9060005260206000200154815260200190815260200160002085611b4f565b600154600090815260036020908152604090912054908701516001600160e81b0363010000009092048216911611156112655760018590555b60408087018051600090815260036020818152918490208a51838c01516001600160e81b031663010000000262ffffff909116178155925160018401556060808b0151805160028601805483870151988401516001600160401b03908116600160801b0267ffffffffffffffff60801b199a8216600160401b026fffffffffffffffffffffffffffffffff1990931691909416171797909716178655908101519184019190915560808101516004840180546001600160a01b039092166001600160a01b031990921691909117905560a081015180518b9592936113509260058701929101906138e4565b5050506040909701519750505050505050505b92915050565b60008281526003602052604081205462ffffff1661138957506000611363565b60008061139885600154611bb2565b9092509050816113ad57600092505050611363565b6000858152600360205260409020546113cf9060ff86169062ffffff16613ec9565b60008281526003602052604090205462ffffff91821691161161144157600085815260036020526040808220548383529120546114149162ffffff9081169116613ee7565b61141e9085613f0b565b9350600061142c8286611cf0565b90508061143f5760009350505050611363565b505b506001949350505050565b6060600061145d8787878787611d76565b60408051600081526020810190915290915081156114a25761149f88805190602001206003600089805190602001208152602001908152602001600020611e61565b90505b6040518281527ff68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd361409060200160405180910390a1979650505050505050565b80516000906114f157506000919050565b6020820151805160001a9060c082101561150f575060009392505050565b5060019392505050565b8051600090811a60808110156115325750600092915050565b60b881108061154d575060c0811080159061154d575060f881105b1561155b5750600192915050565b60c081101561158857611570600160b8613f0b565b61157d9060ff1682613e37565b610b21906001613dc3565b611570600160f8613f0b565b80516000908190811a60808110156115af5760019150610d2e565b60b88110156115d5576115c3608082613e37565b6115ce906001613dc3565b9150610d2e565b60c08110156116025760b78103600185019450806020036101000a85510460018201810193505050610d2e565b60f8811015611616576115c360c082613e37565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8061164257505050565b6020811061167a5782518252611659602084613dc3565b9250611666602083613dc3565b9150611673602082613e37565b9050611642565b60006001611689836020613e37565b61169590610100614012565b61169f9190613e37565b935183518516941916939093179091525050565b60009081526003602052604090206002015442600160801b9091046001600160401b03161090565b6000806116ea61036284610872565b905060005b6116f88261090b565b15611733578060041415611717576106dc6117128361092f565b61098c565b6117208261092f565b508061172b81613e4e565b9150506116ef565b5060009392505050565b60008681526003602052604081205462ffffff166117945760405162461bcd60e51b8152602060048201526014602482015273189b1bd8dac8191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610406565b6000806117a389600154611bb2565b91509150816118075760405162461bcd60e51b815260206004820152602a60248201527f626c6f636b206973206e6f742070617274206f6620746865206c6f6e67657374604482015269102837ab9031b430b4b760b11b6064820152608401610406565b6000898152600360205260409020546118299060ff8a169062ffffff16613ec9565b60008281526003602052604090205462ffffff9182169116116118f1576000898152600360205260408082205483835291205461186e9162ffffff9081169116613ee7565b6118789089613f0b565b97506000611886828a611cf0565b9050806118ef5760405162461bcd60e51b815260206004820152603160248201527f626c6f636b206973206c6f636b6564206f72206e6f7420636f6e6669726d656460448201527020627920656e6f75676820626c6f636b7360781b6064820152608401610406565b505b60006118ff8888888861212a565b11156119105760019250505061050e565b50600098975050505050505050565b60008061192e61036284610872565b905060005b61193c8261090b565b15611733578060051415611956576106dc6117128361092f565b61195f8261092f565b508061196a81613e4e565b915050611933565b60008061198161036284610872565b905060005b61198f8261090b565b156117335780600314156119a9576106dc6117128361092f565b6119b28261092f565b50806119bd81613e4e565b915050611986565b6000818152600360208181526040808420600281015493810154600482015460058301805485518188028101880190965280865260609897889788978897889790966001600160401b03600160401b8604811696818716969395600160801b909404909116936001600160a01b0390921692889190830182828015611a6957602002820191906000526020600020905b815481526020019060010190808311611a55575b50505050509550846001600160401b03169450836001600160401b03169350816001600160401b031691509650965096509650965096505091939550919395565b600080600080600080600080611ac26103628a610872565b90505b611ace8161090b565b15611b405784611aeb57611ae46117128261092f565b9350611b2e565b8460071415611b0757611b006117128261092f565b9150611b2e565b8460081415611b2357611b1c6117128261092f565b9250611b2e565b611b2c8161092f565b505b84611b3881613e4e565b955050611ac5565b50919790965090945092505050565b6003820154811415611b5f575050565b6003820181905560058201546001141561039c5761039c6003600084600201600301600081548110611b9357611b93613e21565b9060005260206000200154815260200190815260200160002082611b4f565b600080828180611bc1836116b3565b15611bca578291505b60008781526003602052604080822060029081015486845291909220909101546001600160401b03600160401b92839004811692909104161115611c5857506000918252600360208190526040909220600281015492015491600160401b90046001600160401b031681611c5357611c41836116b3565b15611c5357611c5083826123ca565b91505b611bca565b60008781526003602052604080822060029081015486845291909220909101546001600160401b03600160401b92839004811692909104161015611ca45750600093509150611ce99050565b6000878152600360205260408082205485835291205462ffffff91821691161015611cd75750600093509150611ce99050565b81611ce0578691505b50600193509150505b9250929050565b6000611cfb836116b3565b611d0757506000611363565b60ff8216611d1757506001611363565b600083815260036020526040902060050154611d3557506000611363565b60008381526003602052604081206005018054610b219290611d5957611d59613e21565b9060005260206000200154600184611d719190613f0b565b611cf0565b6000806000806000611d888a89612468565b9296509094509250905083611e5357600080546040516329e265df60e01b81526001600160a01b03909116906329e265df90611dd29087908e90889088908f908f90600401614059565b6040805180830381865afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1291906140a8565b60408051838152602081018390529297509092507f368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e910160405180910390a1505b509198975050505050505050565b60606000611e708460006128e9565b600584015490915060011415611ee95760018084015460048054808401825560008290527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b019190915554611ec59190613e37565b60028401805467ffffffffffffffff19166001600160401b03929092169190911790555b60005b6005840154811015611fb35784846002016003018281548110611f1157611f11613e21565b90600052602060002001541415611fa157600584018054611f3490600190613e37565b81548110611f4457611f44613e21565b9060005260206000200154846002016003018281548110611f6757611f67613e21565b60009182526020909120015560058401805480611f8657611f86613e88565b60019003818190600052602060002001600090559055611fb3565b80611fab81613e4e565b915050611eec565b5060058301546001141561201c5761201c6003600085600201600301600081548110611fe157611fe1613e21565b600091825260208083209091015483528201929092526040019020600385015460028601546001600160401b03600160401b90910416612c1c565b600460008154811061203057612030613e21565b60009182526020909120015460019081555b6004548110156120ef5760015460009081526003602081905260408220546004805463010000009092046001600160e81b031693918590811061208757612087613e21565b600091825260208083209091015483528201929092526040019020546001600160e81b0363010000009091041611156120dd57600481815481106120cd576120cd613e21565b6000918252602090912001546001555b806120e781613e4e565b915050612042565b506040518481527ff96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d49060200160405180910390a19392505050565b60008061213684610872565b9050600061214382612cad565b9050606080856000806121558b612dc2565b90508051600014156121715760019750505050505050506106dc565b60005b86518110156123ba578151831115612197576002985050505050505050506106dc565b6121b98782815181106121ac576121ac613e21565b6020026020010151610a07565b9550858051906020012084146121da576003985050505050505050506106dc565b6121eb6121e687610872565b612cad565b94508451601114156122c057815183141561224d578c8051906020012061221e866010815181106121ac576121ac613e21565b80519060200120141561223c576000985050505050505050506106dc565b6004985050505050505050506106dc565b600082848151811061226157612261613e21565b016020015160f81c9050601081111561228657600599505050505050505050506106dc565b6122ab868260ff168151811061229e5761229e613e21565b602002602001015161098c565b94506122b8600185613dc3565b9350506123a8565b845160021415612397576122ea6122e3866000815181106121ac576121ac613e21565b8385612e69565b6122f49084613dc3565b9250815183141561234c578c8051906020012061231d866001815181106121ac576121ac613e21565b80519060200120141561233b576000985050505050505050506106dc565b6006985050505050505050506106dc565b6123656122e3866000815181106121ac576121ac613e21565b61237a576007985050505050505050506106dc565b6123908560018151811061229e5761229e613e21565b93506123a8565b6008985050505050505050506106dc565b806123b281613e4e565b915050612174565b5050505050505050949350505050565b6000805b60008481526003602052604090206005015481101561246057600084815260036020526040812060050180548390811061240a5761240a613e21565b600091825260208083209091015480835260039091526040909120600201549091506001600160401b03600160401b9091041684141561244d5791506113639050565b508061245881613e4e565b9150506123ce565b509192915050565b815160208084019190912082518383012060008281526003909352604083205483928392839262ffffff166124df5760405162461bcd60e51b815260206004820152601e60248201527f70726f76696465642068656164657220646f6573206e6f7420657869737400006044820152606401610406565b60008181526003602052604090205462ffffff1661253f5760405162461bcd60e51b815260206004820152601e60248201527f70726f766964656420706172656e7420646f6573206e6f7420657869737400006044820152606401610406565b612548826116b3565b156125955760405162461bcd60e51b815260206004820152601960248201527f6469737075746520706572696f642069732065787069726564000000000000006044820152606401610406565b600082815260036020818152604080842085855293819020815160808082018452865462ffffff81168352630100000090046001600160e81b031682860152600187015482850152835160c0810185526002880180546001600160401b038082168452600160401b82048116848a0152600160801b90910416828701529688015460608083019190915260048901546001600160a01b03169282019290925260058801805486518189028101890190975280875294976127989794968a96948801959394919360a086019391929083018282801561269257602002820191906000526020600020905b81548152602001906001019080831161267e575b505050919092525050509052506040805160808082018352855462ffffff81168352630100000090046001600160e81b0316602080840191909152600187015483850152835160c0810185526002880180546001600160401b038082168452600160401b8204811684860152600160801b9091041682870152600389015460608084019190915260048a01546001600160a01b03169483019490945260058901805487518186028101860190985280885295968a96958801959394929360a086019391929183018282801561278657602002820191906000526020600020905b815481526020019060010190808311612772575b50505050508152505081525050612f72565b6128195760405162461bcd60e51b815260206004820152604660248201527f73746f72656420706172656e74206973206e6f7420612070726564656365737360448201527f6f72206f662073746f726564206865616465722077697468696e2054657374696064820152656d6f6e69756d60d01b608482015260a401610406565b60006128248b612fd7565b905060006128318b612fd7565b825190915085146128b55760405162461bcd60e51b815260206004820152604260248201527f70726f766964656420686561646572277320706172656e7420646f6573206e6f60448201527f74206d6174636820776974682070726f766964656420706172656e74272068616064820152610e6d60f31b608482015260a401610406565b6128bf828261319f565b935461014083015161016090930151949d62ffffff9091169c50919a509298509650505050505050565b600082815260036020526040902060609081612906600185613dc3565b6005830154909450600110156129e25760408051600080825260208201909252905b600584015481101561298557600061296385600201600301838154811061295157612951613e21565b906000526020600020015460006128e9565b905061296f83826132bc565b925050808061297d90613e4e565b915050612928565b506129de8582516129969190613dc3565b6001600160401b038111156129ad576129ad6139d3565b6040519080825280602002602001820160405280156129d6578160200160208202803683370190505b5082876133ed565b9150505b600582015460011415612a1f57612a1c82600201600301600081548110612a0b57612a0b613e21565b9060005260206000200154856128e9565b90505b60028201546004546001600160401b03909116108015612a6a575060028201546004805487926001600160401b0316908110612a5d57612a5d613e21565b9060005260206000200154145b15612b6f576004805460009190612a8390600190613e37565b81548110612a9357612a93613e21565b600091825260209091200154600284015460048054929350839290916001600160401b0316908110612ac757612ac7613e21565b6000918252602090912001556004805480612ae457612ae4613e88565b60008281526020808220830160001990810183905590920190925560028086015484845260039092526040909220909101805467ffffffffffffffff19166001600160401b039283161790558590811115612b4157612b416139d3565b604051908082528060200260200182016040528015612b6a578160200160208202803683370190505b509150505b6000858152600360205260409020600401546001600160a01b031681612b96600187613e37565b81518110612ba657612ba6613e21565b6001600160a01b03909216602092830291909101820152600086815260039182905260408120818155600181018290556002810180546001600160c01b03191681559281018290556004810180546001600160a01b03191690559181612c0f600585018261392f565b5092979650505050505050565b6003830154821415612c2d57505050565b600383018290556002830180546fffffffffffffffff00000000000000001916600160401b6001600160401b03841602179055600583015460011415610b9357610b936003600085600201600301600081548110612c8d57612c8d613e21565b906000526020600020015481526020019081526020016000208383612c1c565b6060612cb8826114e0565b612cc157600080fd5b6000612ccc83613484565b90506000816001600160401b03811115612ce857612ce86139d3565b604051908082528060200260200182016040528015612d2d57816020015b6040805180820190915260008082526020820152815260200190600190039081612d065790505b5090506000612d3f8560200151611519565b8560200151612d4e9190613dc3565b90506000805b84811015612db757612d6583611594565b9150604051806040016040528083815260200184815250848281518110612d8e57612d8e613e21565b6020908102919091010152612da38284613dc3565b925080612daf81613e4e565b915050612d54565b509195945050505050565b6060600082516002612dd49190613e69565b6001600160401b03811115612deb57612deb6139d3565b6040519080825280601f01601f191660200182016040528015612e15576020820181803683370190505b50905060005b8151811015610d2e57612e2e81856134fe565b828281518110612e4057612e40613e21565b60200101906001600160f81b031916908160001a90535080612e6181613e4e565b915050612e1b565b6000806000612e778661357f565b9050600081516001600160401b03811115612e9457612e946139d3565b6040519080825280601f01601f191660200182016040528015612ebe576020820181803683370190505b509050845b8251612ecf9087613dc3565b811015612f42576000878281518110612eea57612eea613e21565b01602001516001600160f81b03191690508083612f078985613e37565b81518110612f1757612f17613e21565b60200101906001600160f81b031916908160001a905350508080612f3a90613e4e565b915050612ec3565b50808051906020012082805190602001201415612f625781519250612f67565b600092505b509095945050505050565b6000805b826060015160a0015151811015611733576000836060015160a001518281518110612fa357612fa3613e21565b602002602001015190508460400151811415612fc457600192505050611363565b5080612fcf81613e4e565b915050612f76565b612fdf613950565b612fe7613950565b6000612ff561036285610872565b905060005b6130038261090b565b156131965780613020576130196117128361092f565b8352613184565b806001141561303f576130356117128361092f565b6020840152613184565b806003141561305e576130546117128361092f565b6040840152613184565b806004141561307d576130736117128361092f565b6060840152613184565b806005141561309c576130926117128361092f565b6080840152613184565b80600714156130bc576130b16117128361092f565b610160840152613184565b80600814156130db576130d16117128361092f565b60a0840152613184565b80600914156130fa576130f06117128361092f565b60c0840152613184565b80600a14156131195761310f6117128361092f565b60e0840152613184565b80600b14156131395761312e6117128361092f565b610120840152613184565b80600c14156131595761314e6103868361092f565b610180840152613184565b80600e14156131795761316e6117128361092f565b610140840152613184565b6131828261092f565b505b8061318e81613e4e565b915050612ffa565b50909392505050565b6000602060ff168361018001515111156131bb57506003611363565b6131c6600f42613dc3565b83610120015111156131da57506005611363565b677fffffffffffffff8360c0015111156131f657506008611363565b60c0830151611388111561320c57506009611363565b6004541561329b578260a001518260a00151600161322a9190613dc3565b1461323757506004611363565b8261012001518261012001511061325057506006611363565b60006132618385610120015161372e565b90508361016001518114613279576007915050611363565b61328b8460c001518460c0015161389a565b61329957600a915050611363565b505b8260c001518360e0015111156132b35750600b611363565b50600092915050565b60606000825184516132ce9190613dc3565b6001600160401b038111156132e5576132e56139d3565b60405190808252806020026020018201604052801561330e578160200160208202803683370190505b50905060005b84518110156133735784818151811061332f5761332f613e21565b602002602001015182828151811061334957613349613e21565b6001600160a01b03909216602092830291909101909101528061336b81613e4e565b915050613314565b60005b84518110156133e35784818151811061339157613391613e21565b60200260200101518383815181106133ab576133ab613e21565b6001600160a01b0390921660209283029190910190910152816133cd81613e4e565b92505080806133db90613e4e565b915050613376565b5090949350505050565b606082518285516133fe9190613e37565b101561340957600080fd5b8160005b845181101561347a5784818151811061342857613428613e21565b602002602001015186838151811061344257613442613e21565b6001600160a01b03909216602092830291909101909101528161346481613e4e565b925050808061347290613e4e565b91505061340d565b5093949350505050565b805160009061349557506000919050565b6000806134a58460200151611519565b84602001516134b49190613dc3565b90506000846000015185602001516134cc9190613dc3565b90505b80821015613196576134e082611594565b6134ea9083613dc3565b9150826134f681613e4e565b9350506134cf565b600061350b6002846140e2565b156135455760108261351e6002866140f6565b8151811061352e5761352e613e21565b0160200151613540919060f81c61410a565b613575565b6010826135536002866140f6565b8151811061356357613563613e21565b0160200151613575919060f81c61412c565b60f81b9392505050565b6060806000835111156113635760008061359a6000866134fe565b60f81c905060018114806135b157508060ff166003145b15613658576001855160026135c69190613e69565b6135d09190613e37565b6001600160401b038111156135e7576135e76139d3565b6040519080825280601f01601f191660200182016040528015613611576020820181803683370190505b50925060006136216001876134fe565b9050808460008151811061363757613637613e21565b60200101906001600160f81b031916908160001a90535060019250506136bb565b6002855160026136689190613e69565b6136729190613e37565b6001600160401b03811115613689576136896139d3565b6040519080825280601f01601f1916602001820160405280156136b3576020820181803683370190505b509250600091505b60ff82165b8351811015613725576136ea6136d960ff851683613e37565b6136e4906002613dc3565b876134fe565b8482815181106136fc576136fc613e21565b60200101906001600160f81b031916908160001a9053508061371d81613e4e565b9150506136c0565b50505092915050565b6000806009846101200151846137449190613e37565b61374e91906140f6565b90507f1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493478460200151141561378e5761378781600161414e565b905061379c565b61379981600261414e565b90505b6062198112156137ab57506062195b806108008561016001516137bf919061418d565b6137c991906141bb565b8461016001516137d99190614240565b9050620200008112156137ec5750620200005b60a0840151624c4b3f9062d228c890613806906001613dc3565b10613815575062a344df613835565b628c61808560a00151600161382a9190613dc3565b1061383557506289543f5b6000818660a001511061385557818660a001516138529190613e37565b90505b6000613864620186a0836140f6565b90506001811115612db75761387a600282613e37565b613885906002614012565b61388f9085613dc3565b945050505050611363565b6000806138a961040084614281565b905060006138b784866142c0565b905060008160070b12156138d4576138d160001982614312565b90505b600791820b910b13159392505050565b82805482825590600052602060002090810192821561391f579160200282015b8281111561391f578251825591602001919060010190613904565b5061392b9291506139be565b5090565b508054600082559060005260206000209081019061394d91906139be565b50565b604080516101a08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201839052610140820183905261016082019290925261018081019190915290565b5b8082111561392b57600081556001016139bf565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613a1157613a116139d3565b604052919050565b600082601f830112613a2a57600080fd5b81356001600160401b03811115613a4357613a436139d3565b613a56601f8201601f19166020016139e9565b818152846020838601011115613a6b57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613a9a57600080fd5b81356001600160401b03811115613ab057600080fd5b6106dc84828501613a19565b600060208284031215613ace57600080fd5b5035919050565b803560ff81168114613ae657600080fd5b919050565b60008060008060008060c08789031215613b0457600080fd5b8635955060208701356001600160401b0380821115613b2257600080fd5b613b2e8a838b01613a19565b9650613b3c60408a01613ad5565b95506060890135915080821115613b5257600080fd5b613b5e8a838b01613a19565b94506080890135915080821115613b7457600080fd5b613b808a838b01613a19565b935060a0890135915080821115613b9657600080fd5b50613ba389828a01613a19565b9150509295509295509295565b600080600060608486031215613bc557600080fd5b8335925060208401359150613bdc60408501613ad5565b90509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613c1d57835183529284019291840191600101613c01565b50909695505050505050565b600082601f830112613c3a57600080fd5b813560206001600160401b03821115613c5557613c556139d3565b8160051b613c648282016139e9565b9283528481018201928281019087851115613c7e57600080fd5b83870192505b84831015613c9d57823582529183019190830190613c84565b979650505050505050565b600080600080600060a08688031215613cc057600080fd5b85356001600160401b0380821115613cd757600080fd5b613ce389838a01613a19565b9650602088013595506040880135915080821115613d0057600080fd5b613d0c89838a01613a19565b94506060880135915080821115613d2257600080fd5b613d2e89838a01613c29565b93506080880135915080821115613d4457600080fd5b50613d5188828901613c29565b9150509295509295909350565b6020808252602f908201527f7472616e7366657220616d6f756e74206e6f7420657175616c20746f2066756e60408201526e31ba34b7b7103830b930b6b2ba32b960891b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115613dd657613dd6613dad565b500190565b60208082526026908201527f70726f766964656420666565206973206c657373207468616e2065787065637460408201526565642066656560d01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600082821015613e4957613e49613dad565b500390565b6000600019821415613e6257613e62613dad565b5060010190565b6000816000190483118215151615613e8357613e83613dad565b500290565b634e487b7160e01b600052603160045260246000fd5b60006001600160401b03808316818516808303821115613ec057613ec0613dad565b01949350505050565b600062ffffff808316818516808303821115613ec057613ec0613dad565b600062ffffff83811690831681811015613f0357613f03613dad565b039392505050565b600060ff821660ff841680821015613f2557613f25613dad565b90039392505050565b600181815b80851115613f69578160001904821115613f4f57613f4f613dad565b80851615613f5c57918102915b93841c9390800290613f33565b509250929050565b600082613f8057506001611363565b81613f8d57506000611363565b8160018114613fa35760028114613fad57613fc9565b6001915050611363565b60ff841115613fbe57613fbe613dad565b50506001821b611363565b5060208310610133831016604e8410600b8410161715613fec575081810a611363565b613ff68383613f2e565b806000190482111561400a5761400a613dad565b029392505050565b6000610b218383613f71565b600081518084526020808501945080840160005b8381101561404e57815187529582019590820190600101614032565b509495945050505050565b62ffffff8716815285602082015284604082015283606082015260c06080820152600061408960c083018561401e565b82810360a084015261409b818561401e565b9998505050505050505050565b600080604083850312156140bb57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b6000826140f1576140f16140cc565b500690565b600082614105576141056140cc565b500490565b600060ff83168061411d5761411d6140cc565b8060ff84160691505092915050565b600060ff83168061413f5761413f6140cc565b8060ff84160491505092915050565b60008083128015600160ff1b85018412161561416c5761416c613dad565b6001600160ff1b038401831381161561418757614187613dad565b50500390565b60008261419c5761419c6140cc565b600160ff1b8214600019841416156141b6576141b6613dad565b500590565b60006001600160ff1b03818413828413808216868404861116156141e1576141e1613dad565b600160ff1b600087128281168783058912161561420057614200613dad565b6000871292508782058712848416161561421c5761421c613dad565b8785058712818416161561423257614232613dad565b505050929093029392505050565b600080821280156001600160ff1b038490038513161561426257614262613dad565b600160ff1b839003841281161561427b5761427b613dad565b50500190565b60008160070b8360070b80614298576142986140cc565b677fffffffffffffff198214600019821416156142b7576142b7613dad565b90059392505050565b60008160070b8360070b6000811281677fffffffffffffff19018312811516156142ec576142ec613dad565b81677fffffffffffffff01831381161561430857614308613dad565b5090039392505050565b60008160070b8360070b677fffffffffffffff60008213600084138383048511828216161561434357614343613dad565b677fffffffffffffff19600085128281168783058712161561436757614367613dad565b6000871292508582058712848416161561438357614383613dad565b8585058712818416161561439957614399613dad565b505050929091029594505050505056fea2646970667358221220c7ecaef31eb2024796b8492e61630b1b26404b131b7db6614a46bfef5482e5ec64736f6c634300080b0033",
}

// TestimoniumABI is the input ABI used to generate the binding from.
// Deprecated: Use TestimoniumMetaData.ABI instead.
var TestimoniumABI = TestimoniumMetaData.ABI

// TestimoniumBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestimoniumMetaData.Bin instead.
var TestimoniumBin = TestimoniumMetaData.Bin

// DeployTestimonium deploys a new Ethereum contract, binding an instance of Testimonium to it.
func DeployTestimonium(auth *bind.TransactOpts, backend bind.ContractBackend, _rlpHeader []byte, totalDifficulty *big.Int, _ethashContractAddr common.Address) (common.Address, *types.Transaction, *Testimonium, error) {
	parsed, err := TestimoniumMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestimoniumBin), backend, _rlpHeader, totalDifficulty, _ethashContractAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Testimonium{TestimoniumCaller: TestimoniumCaller{contract: contract}, TestimoniumTransactor: TestimoniumTransactor{contract: contract}, TestimoniumFilterer: TestimoniumFilterer{contract: contract}}, nil
}

// Testimonium is an auto generated Go binding around an Ethereum contract.
type Testimonium struct {
	TestimoniumCaller     // Read-only binding to the contract
	TestimoniumTransactor // Write-only binding to the contract
	TestimoniumFilterer   // Log filterer for contract events
}

// TestimoniumCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestimoniumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestimoniumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestimoniumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestimoniumSession struct {
	Contract     *Testimonium      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestimoniumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestimoniumCallerSession struct {
	Contract *TestimoniumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TestimoniumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestimoniumTransactorSession struct {
	Contract     *TestimoniumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TestimoniumRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestimoniumRaw struct {
	Contract *Testimonium // Generic contract binding to access the raw methods on
}

// TestimoniumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestimoniumCallerRaw struct {
	Contract *TestimoniumCaller // Generic read-only contract binding to access the raw methods on
}

// TestimoniumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestimoniumTransactorRaw struct {
	Contract *TestimoniumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestimonium creates a new instance of Testimonium, bound to a specific deployed contract.
func NewTestimonium(address common.Address, backend bind.ContractBackend) (*Testimonium, error) {
	contract, err := bindTestimonium(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Testimonium{TestimoniumCaller: TestimoniumCaller{contract: contract}, TestimoniumTransactor: TestimoniumTransactor{contract: contract}, TestimoniumFilterer: TestimoniumFilterer{contract: contract}}, nil
}

// NewTestimoniumCaller creates a new read-only instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumCaller(address common.Address, caller bind.ContractCaller) (*TestimoniumCaller, error) {
	contract, err := bindTestimonium(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestimoniumCaller{contract: contract}, nil
}

// NewTestimoniumTransactor creates a new write-only instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumTransactor(address common.Address, transactor bind.ContractTransactor) (*TestimoniumTransactor, error) {
	contract, err := bindTestimonium(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestimoniumTransactor{contract: contract}, nil
}

// NewTestimoniumFilterer creates a new log filterer instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumFilterer(address common.Address, filterer bind.ContractFilterer) (*TestimoniumFilterer, error) {
	contract, err := bindTestimonium(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestimoniumFilterer{contract: contract}, nil
}

// bindTestimonium binds a generic wrapper to an already deployed contract.
func bindTestimonium(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestimoniumABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Testimonium *TestimoniumRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Testimonium.Contract.TestimoniumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Testimonium *TestimoniumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Testimonium.Contract.TestimoniumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Testimonium *TestimoniumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Testimonium.Contract.TestimoniumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Testimonium *TestimoniumCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Testimonium.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Testimonium *TestimoniumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Testimonium.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Testimonium *TestimoniumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Testimonium.Contract.contract.Transact(opts, method, params...)
}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Testimonium *TestimoniumCaller) GetBlockHashesSubmittedByClient(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getBlockHashesSubmittedByClient")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Testimonium *TestimoniumSession) GetBlockHashesSubmittedByClient() ([][32]byte, error) {
	return _Testimonium.Contract.GetBlockHashesSubmittedByClient(&_Testimonium.CallOpts)
}

// GetBlockHashesSubmittedByClient is a free data retrieval call binding the contract method 0xf06dab9e.
//
// Solidity: function getBlockHashesSubmittedByClient() view returns(bytes32[])
func (_Testimonium *TestimoniumCallerSession) GetBlockHashesSubmittedByClient() ([][32]byte, error) {
	return _Testimonium.Contract.GetBlockHashesSubmittedByClient(&_Testimonium.CallOpts)
}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Testimonium *TestimoniumCaller) GetGenesisBlockHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getGenesisBlockHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Testimonium *TestimoniumSession) GetGenesisBlockHash() ([32]byte, error) {
	return _Testimonium.Contract.GetGenesisBlockHash(&_Testimonium.CallOpts)
}

// GetGenesisBlockHash is a free data retrieval call binding the contract method 0x29a12be9.
//
// Solidity: function getGenesisBlockHash() view returns(bytes32 hash)
func (_Testimonium *TestimoniumCallerSession) GetGenesisBlockHash() ([32]byte, error) {
	return _Testimonium.Contract.GetGenesisBlockHash(&_Testimonium.CallOpts)
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Testimonium *TestimoniumCaller) GetHeader(opts *bind.CallOpts, blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getHeader", blockHash)

	outstruct := new(struct {
		Hash            [32]byte
		BlockNumber     *big.Int
		TotalDifficulty *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalDifficulty = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Testimonium *TestimoniumSession) GetHeader(blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	return _Testimonium.Contract.GetHeader(&_Testimonium.CallOpts, blockHash)
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) view returns(bytes32 hash, uint256 blockNumber, uint256 totalDifficulty)
func (_Testimonium *TestimoniumCallerSession) GetHeader(blockHash [32]byte) (struct {
	Hash            [32]byte
	BlockNumber     *big.Int
	TotalDifficulty *big.Int
}, error) {
	return _Testimonium.Contract.GetHeader(&_Testimonium.CallOpts, blockHash)
}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Testimonium *TestimoniumCaller) GetLongestChainEndpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getLongestChainEndpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Testimonium *TestimoniumSession) GetLongestChainEndpoint() ([32]byte, error) {
	return _Testimonium.Contract.GetLongestChainEndpoint(&_Testimonium.CallOpts)
}

// GetLongestChainEndpoint is a free data retrieval call binding the contract method 0x0d6501a6.
//
// Solidity: function getLongestChainEndpoint() view returns(bytes32 hash)
func (_Testimonium *TestimoniumCallerSession) GetLongestChainEndpoint() ([32]byte, error) {
	return _Testimonium.Contract.GetLongestChainEndpoint(&_Testimonium.CallOpts)
}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Testimonium *TestimoniumCaller) GetRequiredStakePerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getRequiredStakePerBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Testimonium *TestimoniumSession) GetRequiredStakePerBlock() (*big.Int, error) {
	return _Testimonium.Contract.GetRequiredStakePerBlock(&_Testimonium.CallOpts)
}

// GetRequiredStakePerBlock is a free data retrieval call binding the contract method 0xacef3a1e.
//
// Solidity: function getRequiredStakePerBlock() pure returns(uint256)
func (_Testimonium *TestimoniumCallerSession) GetRequiredStakePerBlock() (*big.Int, error) {
	return _Testimonium.Contract.GetRequiredStakePerBlock(&_Testimonium.CallOpts)
}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Testimonium *TestimoniumCaller) GetRequiredVerificationFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getRequiredVerificationFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Testimonium *TestimoniumSession) GetRequiredVerificationFee() (*big.Int, error) {
	return _Testimonium.Contract.GetRequiredVerificationFee(&_Testimonium.CallOpts)
}

// GetRequiredVerificationFee is a free data retrieval call binding the contract method 0x3452e2db.
//
// Solidity: function getRequiredVerificationFee() pure returns(uint256)
func (_Testimonium *TestimoniumCallerSession) GetRequiredVerificationFee() (*big.Int, error) {
	return _Testimonium.Contract.GetRequiredVerificationFee(&_Testimonium.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Testimonium *TestimoniumCaller) GetStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "getStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Testimonium *TestimoniumSession) GetStake() (*big.Int, error) {
	return _Testimonium.Contract.GetStake(&_Testimonium.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() view returns(uint256)
func (_Testimonium *TestimoniumCallerSession) GetStake() (*big.Int, error) {
	return _Testimonium.Contract.GetStake(&_Testimonium.CallOpts)
}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Testimonium *TestimoniumCaller) IsHeaderStored(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _Testimonium.contract.Call(opts, &out, "isHeaderStored", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Testimonium *TestimoniumSession) IsHeaderStored(hash [32]byte) (bool, error) {
	return _Testimonium.Contract.IsHeaderStored(&_Testimonium.CallOpts, hash)
}

// IsHeaderStored is a free data retrieval call binding the contract method 0xd0f0923b.
//
// Solidity: function isHeaderStored(bytes32 hash) view returns(bool)
func (_Testimonium *TestimoniumCallerSession) IsHeaderStored(hash [32]byte) (bool, error) {
	return _Testimonium.Contract.IsHeaderStored(&_Testimonium.CallOpts, hash)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Testimonium *TestimoniumTransactor) DepositStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "depositStake", amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Testimonium *TestimoniumSession) DepositStake(amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DepositStake(&_Testimonium.TransactOpts, amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0xcb82cc8f.
//
// Solidity: function depositStake(uint256 amount) payable returns()
func (_Testimonium *TestimoniumTransactorSession) DepositStake(amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DepositStake(&_Testimonium.TransactOpts, amount)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfd62f655.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes32 rlpHeaderHashWithoutNonce, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumTransactor) DisputeBlockHeader(opts *bind.TransactOpts, rlpHeader []byte, rlpHeaderHashWithoutNonce [32]byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "disputeBlockHeader", rlpHeader, rlpHeaderHashWithoutNonce, rlpParent, dataSetLookup, witnessForLookup)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfd62f655.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes32 rlpHeaderHashWithoutNonce, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumSession) DisputeBlockHeader(rlpHeader []byte, rlpHeaderHashWithoutNonce [32]byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DisputeBlockHeader(&_Testimonium.TransactOpts, rlpHeader, rlpHeaderHashWithoutNonce, rlpParent, dataSetLookup, witnessForLookup)
}

// DisputeBlockHeader is a paid mutator transaction binding the contract method 0xfd62f655.
//
// Solidity: function disputeBlockHeader(bytes rlpHeader, bytes32 rlpHeaderHashWithoutNonce, bytes rlpParent, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumTransactorSession) DisputeBlockHeader(rlpHeader []byte, rlpHeaderHashWithoutNonce [32]byte, rlpParent []byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DisputeBlockHeader(&_Testimonium.TransactOpts, rlpHeader, rlpHeaderHashWithoutNonce, rlpParent, dataSetLookup, witnessForLookup)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Testimonium *TestimoniumTransactor) IsBlockConfirmed(opts *bind.TransactOpts, feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "isBlockConfirmed", feeInWei, blockHash, noOfConfirmations)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Testimonium *TestimoniumSession) IsBlockConfirmed(feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Testimonium.Contract.IsBlockConfirmed(&_Testimonium.TransactOpts, feeInWei, blockHash, noOfConfirmations)
}

// IsBlockConfirmed is a paid mutator transaction binding the contract method 0xdfd6dff8.
//
// Solidity: function isBlockConfirmed(uint256 feeInWei, bytes32 blockHash, uint8 noOfConfirmations) payable returns(bool)
func (_Testimonium *TestimoniumTransactorSession) IsBlockConfirmed(feeInWei *big.Int, blockHash [32]byte, noOfConfirmations uint8) (*types.Transaction, error) {
	return _Testimonium.Contract.IsBlockConfirmed(&_Testimonium.TransactOpts, feeInWei, blockHash, noOfConfirmations)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Testimonium *TestimoniumTransactor) SubmitBlock(opts *bind.TransactOpts, rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "submitBlock", rlpHeader)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Testimonium *TestimoniumSession) SubmitBlock(rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitBlock(&_Testimonium.TransactOpts, rlpHeader)
}

// SubmitBlock is a paid mutator transaction binding the contract method 0xd5107381.
//
// Solidity: function submitBlock(bytes rlpHeader) returns()
func (_Testimonium *TestimoniumTransactorSession) SubmitBlock(rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitBlock(&_Testimonium.TransactOpts, rlpHeader)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Testimonium *TestimoniumTransactor) SubmitBlockBatch(opts *bind.TransactOpts, _rlpHeaders []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "submitBlockBatch", _rlpHeaders)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Testimonium *TestimoniumSession) SubmitBlockBatch(_rlpHeaders []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitBlockBatch(&_Testimonium.TransactOpts, _rlpHeaders)
}

// SubmitBlockBatch is a paid mutator transaction binding the contract method 0x1b2e1054.
//
// Solidity: function submitBlockBatch(bytes _rlpHeaders) returns()
func (_Testimonium *TestimoniumTransactorSession) SubmitBlockBatch(_rlpHeaders []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitBlockBatch(&_Testimonium.TransactOpts, _rlpHeaders)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactor) VerifyReceipt(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "verifyReceipt", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyReceipt(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyReceipt(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyReceipt is a paid mutator transaction binding the contract method 0xed315dfa.
//
// Solidity: function verifyReceipt(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactorSession) VerifyReceipt(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyReceipt(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactor) VerifyState(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "verifyState", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyState(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyState(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyState is a paid mutator transaction binding the contract method 0xaddd9b38.
//
// Solidity: function verifyState(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactorSession) VerifyState(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyState(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactor) VerifyTransaction(opts *bind.TransactOpts, feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "verifyTransaction", feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyTransaction(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyTransaction(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// VerifyTransaction is a paid mutator transaction binding the contract method 0x5e29b7da.
//
// Solidity: function verifyTransaction(uint256 feeInWei, bytes rlpHeader, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) payable returns(uint8)
func (_Testimonium *TestimoniumTransactorSession) VerifyTransaction(feeInWei *big.Int, rlpHeader []byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.VerifyTransaction(&_Testimonium.TransactOpts, feeInWei, rlpHeader, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Testimonium *TestimoniumTransactor) WithdrawStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "withdrawStake", amount)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Testimonium *TestimoniumSession) WithdrawStake(amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.WithdrawStake(&_Testimonium.TransactOpts, amount)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(uint256 amount) returns()
func (_Testimonium *TestimoniumTransactorSession) WithdrawStake(amount *big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.WithdrawStake(&_Testimonium.TransactOpts, amount)
}

// TestimoniumDisputeBlockIterator is returned from FilterDisputeBlock and is used to iterate over the raw logs and unpacked data for DisputeBlock events raised by the Testimonium contract.
type TestimoniumDisputeBlockIterator struct {
	Event *TestimoniumDisputeBlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumDisputeBlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumDisputeBlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumDisputeBlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumDisputeBlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumDisputeBlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumDisputeBlock represents a DisputeBlock event raised by the Testimonium contract.
type TestimoniumDisputeBlock struct {
	ReturnCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDisputeBlock is a free log retrieval operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Testimonium *TestimoniumFilterer) FilterDisputeBlock(opts *bind.FilterOpts) (*TestimoniumDisputeBlockIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "DisputeBlock")
	if err != nil {
		return nil, err
	}
	return &TestimoniumDisputeBlockIterator{contract: _Testimonium.contract, event: "DisputeBlock", logs: logs, sub: sub}, nil
}

// WatchDisputeBlock is a free log subscription operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Testimonium *TestimoniumFilterer) WatchDisputeBlock(opts *bind.WatchOpts, sink chan<- *TestimoniumDisputeBlock) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "DisputeBlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumDisputeBlock)
				if err := _Testimonium.contract.UnpackLog(event, "DisputeBlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputeBlock is a log parse operation binding the contract event 0xf68bea46bc6fb530eae297355e0d416e2545678c786c03ed115311db0dd36140.
//
// Solidity: event DisputeBlock(uint256 returnCode)
func (_Testimonium *TestimoniumFilterer) ParseDisputeBlock(log types.Log) (*TestimoniumDisputeBlock, error) {
	event := new(TestimoniumDisputeBlock)
	if err := _Testimonium.contract.UnpackLog(event, "DisputeBlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumPoWValidationResultIterator is returned from FilterPoWValidationResult and is used to iterate over the raw logs and unpacked data for PoWValidationResult events raised by the Testimonium contract.
type TestimoniumPoWValidationResultIterator struct {
	Event *TestimoniumPoWValidationResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumPoWValidationResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumPoWValidationResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumPoWValidationResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumPoWValidationResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumPoWValidationResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumPoWValidationResult represents a PoWValidationResult event raised by the Testimonium contract.
type TestimoniumPoWValidationResult struct {
	ReturnCode *big.Int
	ErrorInfo  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPoWValidationResult is a free log retrieval operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) FilterPoWValidationResult(opts *bind.FilterOpts) (*TestimoniumPoWValidationResultIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "PoWValidationResult")
	if err != nil {
		return nil, err
	}
	return &TestimoniumPoWValidationResultIterator{contract: _Testimonium.contract, event: "PoWValidationResult", logs: logs, sub: sub}, nil
}

// WatchPoWValidationResult is a free log subscription operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) WatchPoWValidationResult(opts *bind.WatchOpts, sink chan<- *TestimoniumPoWValidationResult) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "PoWValidationResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumPoWValidationResult)
				if err := _Testimonium.contract.UnpackLog(event, "PoWValidationResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePoWValidationResult is a log parse operation binding the contract event 0x368fee0c56ae41c07d7c93332427c609564426ae664e6298300f00514aebe48e.
//
// Solidity: event PoWValidationResult(uint256 returnCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) ParsePoWValidationResult(log types.Log) (*TestimoniumPoWValidationResult, error) {
	event := new(TestimoniumPoWValidationResult)
	if err := _Testimonium.contract.UnpackLog(event, "PoWValidationResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumRemoveBranchIterator is returned from FilterRemoveBranch and is used to iterate over the raw logs and unpacked data for RemoveBranch events raised by the Testimonium contract.
type TestimoniumRemoveBranchIterator struct {
	Event *TestimoniumRemoveBranch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumRemoveBranchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumRemoveBranch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumRemoveBranch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumRemoveBranchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumRemoveBranchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumRemoveBranch represents a RemoveBranch event raised by the Testimonium contract.
type TestimoniumRemoveBranch struct {
	Root [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemoveBranch is a free log retrieval operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) FilterRemoveBranch(opts *bind.FilterOpts) (*TestimoniumRemoveBranchIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "RemoveBranch")
	if err != nil {
		return nil, err
	}
	return &TestimoniumRemoveBranchIterator{contract: _Testimonium.contract, event: "RemoveBranch", logs: logs, sub: sub}, nil
}

// WatchRemoveBranch is a free log subscription operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) WatchRemoveBranch(opts *bind.WatchOpts, sink chan<- *TestimoniumRemoveBranch) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "RemoveBranch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumRemoveBranch)
				if err := _Testimonium.contract.UnpackLog(event, "RemoveBranch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveBranch is a log parse operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) ParseRemoveBranch(log types.Log) (*TestimoniumRemoveBranch, error) {
	event := new(TestimoniumRemoveBranch)
	if err := _Testimonium.contract.UnpackLog(event, "RemoveBranch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumSubmitBlockIterator is returned from FilterSubmitBlock and is used to iterate over the raw logs and unpacked data for SubmitBlock events raised by the Testimonium contract.
type TestimoniumSubmitBlockIterator struct {
	Event *TestimoniumSubmitBlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumSubmitBlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumSubmitBlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumSubmitBlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumSubmitBlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumSubmitBlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumSubmitBlock represents a SubmitBlock event raised by the Testimonium contract.
type TestimoniumSubmitBlock struct {
	BlockHash [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSubmitBlock is a free log retrieval operation binding the contract event 0x1cf94b307af0c800807d60a4e4bdc5145d6df32ad1c9e0cd3a49865e62c3820e.
//
// Solidity: event SubmitBlock(bytes32 blockHash)
func (_Testimonium *TestimoniumFilterer) FilterSubmitBlock(opts *bind.FilterOpts) (*TestimoniumSubmitBlockIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "SubmitBlock")
	if err != nil {
		return nil, err
	}
	return &TestimoniumSubmitBlockIterator{contract: _Testimonium.contract, event: "SubmitBlock", logs: logs, sub: sub}, nil
}

// WatchSubmitBlock is a free log subscription operation binding the contract event 0x1cf94b307af0c800807d60a4e4bdc5145d6df32ad1c9e0cd3a49865e62c3820e.
//
// Solidity: event SubmitBlock(bytes32 blockHash)
func (_Testimonium *TestimoniumFilterer) WatchSubmitBlock(opts *bind.WatchOpts, sink chan<- *TestimoniumSubmitBlock) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "SubmitBlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumSubmitBlock)
				if err := _Testimonium.contract.UnpackLog(event, "SubmitBlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitBlock is a log parse operation binding the contract event 0x1cf94b307af0c800807d60a4e4bdc5145d6df32ad1c9e0cd3a49865e62c3820e.
//
// Solidity: event SubmitBlock(bytes32 blockHash)
func (_Testimonium *TestimoniumFilterer) ParseSubmitBlock(log types.Log) (*TestimoniumSubmitBlock, error) {
	event := new(TestimoniumSubmitBlock)
	if err := _Testimonium.contract.UnpackLog(event, "SubmitBlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumVerifyReceiptIterator is returned from FilterVerifyReceipt and is used to iterate over the raw logs and unpacked data for VerifyReceipt events raised by the Testimonium contract.
type TestimoniumVerifyReceiptIterator struct {
	Event *TestimoniumVerifyReceipt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumVerifyReceiptIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumVerifyReceipt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumVerifyReceipt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumVerifyReceiptIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumVerifyReceiptIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumVerifyReceipt represents a VerifyReceipt event raised by the Testimonium contract.
type TestimoniumVerifyReceipt struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyReceipt is a free log retrieval operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Testimonium *TestimoniumFilterer) FilterVerifyReceipt(opts *bind.FilterOpts) (*TestimoniumVerifyReceiptIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "VerifyReceipt")
	if err != nil {
		return nil, err
	}
	return &TestimoniumVerifyReceiptIterator{contract: _Testimonium.contract, event: "VerifyReceipt", logs: logs, sub: sub}, nil
}

// WatchVerifyReceipt is a free log subscription operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Testimonium *TestimoniumFilterer) WatchVerifyReceipt(opts *bind.WatchOpts, sink chan<- *TestimoniumVerifyReceipt) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "VerifyReceipt")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumVerifyReceipt)
				if err := _Testimonium.contract.UnpackLog(event, "VerifyReceipt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyReceipt is a log parse operation binding the contract event 0x0c3d1c6f7d35f62105cedeb1fea90976e3ea2ef20186074e47754bc04bfbf790.
//
// Solidity: event VerifyReceipt(uint8 result)
func (_Testimonium *TestimoniumFilterer) ParseVerifyReceipt(log types.Log) (*TestimoniumVerifyReceipt, error) {
	event := new(TestimoniumVerifyReceipt)
	if err := _Testimonium.contract.UnpackLog(event, "VerifyReceipt", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumVerifyStateIterator is returned from FilterVerifyState and is used to iterate over the raw logs and unpacked data for VerifyState events raised by the Testimonium contract.
type TestimoniumVerifyStateIterator struct {
	Event *TestimoniumVerifyState // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumVerifyStateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumVerifyState)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumVerifyState)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumVerifyStateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumVerifyStateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumVerifyState represents a VerifyState event raised by the Testimonium contract.
type TestimoniumVerifyState struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyState is a free log retrieval operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Testimonium *TestimoniumFilterer) FilterVerifyState(opts *bind.FilterOpts) (*TestimoniumVerifyStateIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "VerifyState")
	if err != nil {
		return nil, err
	}
	return &TestimoniumVerifyStateIterator{contract: _Testimonium.contract, event: "VerifyState", logs: logs, sub: sub}, nil
}

// WatchVerifyState is a free log subscription operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Testimonium *TestimoniumFilterer) WatchVerifyState(opts *bind.WatchOpts, sink chan<- *TestimoniumVerifyState) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "VerifyState")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumVerifyState)
				if err := _Testimonium.contract.UnpackLog(event, "VerifyState", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyState is a log parse operation binding the contract event 0xb960845fd31f80d28f3e163cea6db4e82ffd7fdabd4694856ce80ed58dd2e9ce.
//
// Solidity: event VerifyState(uint8 result)
func (_Testimonium *TestimoniumFilterer) ParseVerifyState(log types.Log) (*TestimoniumVerifyState, error) {
	event := new(TestimoniumVerifyState)
	if err := _Testimonium.contract.UnpackLog(event, "VerifyState", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumVerifyTransactionIterator is returned from FilterVerifyTransaction and is used to iterate over the raw logs and unpacked data for VerifyTransaction events raised by the Testimonium contract.
type TestimoniumVerifyTransactionIterator struct {
	Event *TestimoniumVerifyTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumVerifyTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumVerifyTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumVerifyTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumVerifyTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumVerifyTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumVerifyTransaction represents a VerifyTransaction event raised by the Testimonium contract.
type TestimoniumVerifyTransaction struct {
	Result uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterVerifyTransaction is a free log retrieval operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Testimonium *TestimoniumFilterer) FilterVerifyTransaction(opts *bind.FilterOpts) (*TestimoniumVerifyTransactionIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "VerifyTransaction")
	if err != nil {
		return nil, err
	}
	return &TestimoniumVerifyTransactionIterator{contract: _Testimonium.contract, event: "VerifyTransaction", logs: logs, sub: sub}, nil
}

// WatchVerifyTransaction is a free log subscription operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Testimonium *TestimoniumFilterer) WatchVerifyTransaction(opts *bind.WatchOpts, sink chan<- *TestimoniumVerifyTransaction) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "VerifyTransaction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumVerifyTransaction)
				if err := _Testimonium.contract.UnpackLog(event, "VerifyTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyTransaction is a log parse operation binding the contract event 0x567d80f0e2776186d59c264eaa20bafaf2a33c3126d76bd5d0b4c5ff4d1342c6.
//
// Solidity: event VerifyTransaction(uint8 result)
func (_Testimonium *TestimoniumFilterer) ParseVerifyTransaction(log types.Log) (*TestimoniumVerifyTransaction, error) {
	event := new(TestimoniumVerifyTransaction)
	if err := _Testimonium.contract.UnpackLog(event, "VerifyTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestimoniumWithdrawStakeIterator is returned from FilterWithdrawStake and is used to iterate over the raw logs and unpacked data for WithdrawStake events raised by the Testimonium contract.
type TestimoniumWithdrawStakeIterator struct {
	Event *TestimoniumWithdrawStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumWithdrawStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumWithdrawStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumWithdrawStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumWithdrawStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumWithdrawStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumWithdrawStake represents a WithdrawStake event raised by the Testimonium contract.
type TestimoniumWithdrawStake struct {
	Client         common.Address
	WithdrawnStake *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawStake is a free log retrieval operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Testimonium *TestimoniumFilterer) FilterWithdrawStake(opts *bind.FilterOpts) (*TestimoniumWithdrawStakeIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "WithdrawStake")
	if err != nil {
		return nil, err
	}
	return &TestimoniumWithdrawStakeIterator{contract: _Testimonium.contract, event: "WithdrawStake", logs: logs, sub: sub}, nil
}

// WatchWithdrawStake is a free log subscription operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Testimonium *TestimoniumFilterer) WatchWithdrawStake(opts *bind.WatchOpts, sink chan<- *TestimoniumWithdrawStake) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "WithdrawStake")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumWithdrawStake)
				if err := _Testimonium.contract.UnpackLog(event, "WithdrawStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawStake is a log parse operation binding the contract event 0x141ef67c4a6d3ec2adfb2f66d33c2b11de5b4f34344757554d430570b18a92ec.
//
// Solidity: event WithdrawStake(address client, uint256 withdrawnStake)
func (_Testimonium *TestimoniumFilterer) ParseWithdrawStake(log types.Log) (*TestimoniumWithdrawStake, error) {
	event := new(TestimoniumWithdrawStake)
	if err := _Testimonium.contract.UnpackLog(event, "WithdrawStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
