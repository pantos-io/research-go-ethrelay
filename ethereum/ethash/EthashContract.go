// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethash

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// EthashABI is the input ABI used to generate the binding from.
const EthashABI = "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errorInfo\",\"type\":\"uint256\"}],\"name\":\"SetEpochData\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochIndex\",\"type\":\"uint256\"}],\"name\":\"isEpochDataSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullSizeIn128Resultion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"branchDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"merkleNodes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numElems\",\"type\":\"uint256\"}],\"name\":\"setEpochData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rlpHeaderHashWithoutNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"name\":\"verifyPoW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// EthashBin is the compiled bytecode used for deploying new contracts.
var EthashBin = "0x608060405234801561001057600080fd5b506131c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806329e265df14610046578063c7b81f4f14610157578063c891a29d1461019d575b600080fd5b61013a600480360360c081101561005c57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001906401000000008111156100a157600080fd5b8201836020820111156100b357600080fd5b803590602001918460208302840111640100000000831117156100d557600080fd5b9091929391929390803590602001906401000000008111156100f657600080fd5b82018360208201111561010857600080fd5b8035906020019184602083028401116401000000008311171561012a57600080fd5b9091929391929390505050610287565b604051808381526020018281526020019250505060405180910390f35b6101836004803603602081101561016d57600080fd5b81019080803590602001909291905050506103c9565b604051808215151515815260200191505060405180910390f35b610285600480360360c08110156101b357600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803590602001906401000000008111156101ee57600080fd5b82018360208201111561020057600080fd5b8035906020019184602083028401116401000000008311171561022257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291905050506103ec565b005b60008060006175308b8161029757fe5b049050600061032b8b8b8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508661057b565b9050887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8161035657fe5b048111156103ac576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe831415610395576001915083905061039d565b600291508290505b818195509550505050506103bc565b6000808191508090509350935050505b9850989650505050505050565b600080600080848152602001908152602001600020610200015414159050919050565b60008090505b818110156104e4576000806000898152602001908152602001600020600001828501610200811061041f57fe5b0154111561049b573373ffffffffffffffffffffffffffffffffffffffff167f5cd723400be8430351b9cbaa5ea421b3fb2528c6a7650c493f895e7d97750da1600183867001000000000000000000000000000000008c020101604051808381526020018281526020019250505060405180910390a250610573565b8381815181106104a757fe5b602002602001015160008089815260200190815260200160002060000182850161020081106104d257fe5b018190555080806001019150506103f2565b508460008088815260200190815260200160002061020001819055508360008088815260200190815260200160002061020101819055503373ffffffffffffffffffffffffffffffffffffffff167f5cd723400be8430351b9cbaa5ea421b3fb2528c6a7650c493f895e7d97750da1600080604051808381526020018281526020019250505060405180910390a25b505050505050565b600061058561307e565b61058d6130a1565b6105956130c4565b61059d6130e7565b604051806040016040528060008089815260200190815260200160002061020101548152602001600080898152602001908152602001600020610200015481525090506000806105ec886103c9565b61061e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9650505050505050610957565b60008360016002811061062d57fe5b60200201511415610666577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9650505050505050610957565b6106738c60001c8c610960565b9550600091505b60108210156106a95760208202808701518187015280870151816102000187015250818060010192505061067a565b600091505b60408210156108a1576000836001600281106106c657fe5b6020020151610702886000601081106106db57fe5b6020020151851888602087816106ed57fe5b06602081106106f857fe5b6020020151610a67565b8161070957fe5b0690506107168982610a80565b61073482858e8e8960006002811061072a57fe5b6020020151610b26565b14610768577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff975050505050505050610957565b600091505b60088210156108935760208b01836080020163ffffffff815116836020028801805163ffffffff8363010001938302181680835260208501945063ffffffff8551169350610100830192508251915063ffffffff84630100019384021816905080835260208501945063ffffffff8551169350610100830192508251915063ffffffff84630100019384021816905080835260208501945063ffffffff8551169350610100830192508251915063ffffffff84630100019384021816905080835250505050506080830260208c01016401000000008151048082526020820191506401000000008251049050808252602082019150640100000000825104905080825260208201915064010000000082510490508082525050818060010192505061076d565b5081806001019250506106ae565b600091505b602082101561093e576109146108fb6108e28785602081106108c457fe5b60200201518860018701602081106108d857fe5b6020020151610a67565b8760028601602081106108f157fe5b6020020151610a67565b86600385016020811061090a57fe5b6020020151610a67565b846004848161091f57fe5b046008811061092a57fe5b6020020181815250506004820191506108a6565b600061094a8786610d6d565b9050809750505050505050505b95945050505050565b61096861307e565b610970613109565b6109798461109b565b935067ffffffffffffffff84168160006009811061099357fe5b6020020181815250506801000000000000000084816109ae57fe5b04935067ffffffffffffffff8416816001600981106109c957fe5b6020020181815250506801000000000000000084816109e457fe5b04935067ffffffffffffffff8416816002600981106109ff57fe5b602002018181525050680100000000000000008481610a1a57fe5b04935067ffffffffffffffff841681600360098110610a3557fe5b6020020181815250508281600460098110610a4c57fe5b602002018181525050610a5e816110e5565b91505092915050565b600063ffffffff82630100019385021816905092915050565b600080600080858152602001908152602001600020610201015483901c9050600080600086815260200190815260200160002060000160028381610ac057fe5b046102008110610acc57fe5b01549050600060028381610adc57fe5b061415610afd576fffffffffffffffffffffffffffffffff81169050610b1b565b7001000000000000000000000000000000008181610b1757fe5b0490505b809250505092915050565b6000806fffffffffffffffffffffffffffffffff610b44868861137f565b169050600080600080600060028881610b5957fe5b061190506002870496506000878b0290508115610b76578a810190505b60008090505b88811015610cbd5760208282010260208b0101519350600060018e161415610bbb578695506fffffffffffffffffffffffffffffffff84169450610bd4565b6fffffffffffffffffffffffffffffffff841695508694505b6fffffffffffffffffffffffffffffffff868660405160200180838152602001828152602001925050506040516020818303038152906040528051906020012060001c16965060028d049c50600060018e161415610c4a5786955070010000000000000000000000000000000084049450610c64565b700100000000000000000000000000000000840495508694505b6fffffffffffffffffffffffffffffffff868660405160200180838152602001828152602001925050506040516020818303038152906040528051906020012060001c16965060028d049c508080600101915050610b7c565b8215610d5a5760208282010260208b0101519350600060018e161415610cfa578695506fffffffffffffffffffffffffffffffff84169450610d13565b6fffffffffffffffffffffffffffffffff841695508694505b6fffffffffffffffffffffffffffffffff868660405160200180838152602001828152602001925050506040516020818303038152906040528051906020012060001c1696505b8697505050505050505095945050505050565b6000807001000000000000000000000000000000006c0100000000000000000000000085600760108110610d9d57fe5b6020020151026801000000000000000086600660108110610dba57fe5b60200201510264010000000087600560108110610dd357fe5b60200201510287600460108110610de657fe5b6020020151010101026c0100000000000000000000000085600360108110610e0a57fe5b6020020151026801000000000000000086600260108110610e2757fe5b60200201510264010000000087600160108110610e4057fe5b60200201510287600060108110610e5357fe5b602002015101010101905060007001000000000000000000000000000000006c0100000000000000000000000086600f60108110610e8d57fe5b6020020151026801000000000000000087600e60108110610eaa57fe5b60200201510264010000000088600d60108110610ec357fe5b60200201510288600c60108110610ed657fe5b6020020151010101026c0100000000000000000000000086600b60108110610efa57fe5b6020020151026801000000000000000087600a60108110610f1757fe5b60200201510264010000000088600960108110610f3057fe5b60200201510288600860108110610f4357fe5b602002015101010101905060007001000000000000000000000000000000006c0100000000000000000000000086600760088110610f7d57fe5b6020020151026801000000000000000087600660088110610f9a57fe5b60200201510264010000000088600560088110610fb357fe5b60200201510288600460088110610fc657fe5b6020020151010101026c0100000000000000000000000086600360088110610fea57fe5b602002015102680100000000000000008760026008811061100757fe5b6020020151026401000000008860016008811061102057fe5b6020020151028860006008811061103357fe5b60200201510101010190506110478361142c565b6110508361142c565b6110598361142c565b6040516020018084815260200183815260200182815260200193505050506040516020818303038152906040528051906020012060001c935050505092915050565b6000806000905060008090505b60208110156110db576101008202915060ff84168201915061010084816110cb57fe5b04935080806001019150506110a8565b5080915050919050565b6110ed61307e565b6048600860090214611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f73706f6e6765206572726f72000000000000000000000000000000000000000081525060200191505060405180910390fd5b60018260056009811061117657fe5b6020020181815250506780000000000000008260086009811061119557fe5b6020020181815250506000604890506000600890506000600860090290506111bb61312c565b60008060008092505b8685816111cd57fe5b0483101561128657600091505b600582101561126e57600090505b6005811015611261578587816111fa57fe5b048260050282011015611254578882600502826009860201016009811061121d57fe5b6020020151848383600502016019811061123357fe5b602002015118848383600502016019811061124a57fe5b6020020181815250505b80806001019150506111e8565b81806001019250506111da565b61127784611476565b935082806001019350506111c4565b61128e61307e565b60008090505b601081101561136e57600093505b600584101561136957600092505b600583101561135c578789816112c257fe5b048460050284011080156112d65750601081105b1561134f5763ffffffff86858560050201601981106112f157fe5b60200201511682826010811061130357fe5b602002018181525050640100000000868585600502016019811061132357fe5b60200201518161132f57fe5b0482600183016010811061133f57fe5b6020020181815250506002810190505b82806001019350506112b0565b83806001019450506112a2565b611294565b819950505050505050505050919050565b600082826004028151811061139057fe5b60200260200101518360018460040201815181106113aa57fe5b60200260200101518460028560040201815181106113c457fe5b60200260200101518560038660040201815181106113de57fe5b6020026020010151604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060001c905092915050565b6000806000905060008090505b602081101561146c576101008202915060ff841682019150610100848161145c57fe5b0493508080600101915050611439565b5080915050919050565b61147e61312c565b61148661312c565b61148e61314f565b61149661314f565b61149e613171565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b601881101561307157866004601981106115db57fe5b6020020151876003601981106115ed57fe5b6020020151886002601981106115ff57fe5b60200201518960016019811061161157fe5b60200201518a60006019811061162357fe5b6020020151181818188460006005811061163957fe5b6020020181815250508660096019811061164f57fe5b60200201518760086019811061166157fe5b60200201518860076019811061167357fe5b60200201518960066019811061168557fe5b60200201518a60056019811061169757fe5b602002015118181818846001600581106116ad57fe5b60200201818152505086600e601981106116c357fe5b602002015187600d601981106116d557fe5b602002015188600c601981106116e757fe5b602002015189600b601981106116f957fe5b60200201518a600a6019811061170b57fe5b6020020151181818188460026005811061172157fe5b6020020181815250508660136019811061173757fe5b60200201518760126019811061174957fe5b60200201518860116019811061175b57fe5b60200201518960106019811061176d57fe5b60200201518a600f6019811061177f57fe5b6020020151181818188460036005811061179557fe5b602002018181525050866018601981106117ab57fe5b6020020151876017601981106117bd57fe5b6020020151886016601981106117cf57fe5b6020020151896015601981106117e157fe5b60200201518a6014601981106117f357fe5b6020020151181818188460046005811061180957fe5b6020020181815250506780000000000000008460016005811061182857fe5b60200201518161183457fe5b0467ffffffffffffffff60028660016005811061184d57fe5b60200201510216178460046005811061186257fe5b6020020151188360006005811061187557fe5b6020020181815250506780000000000000008460026005811061189457fe5b6020020151816118a057fe5b0467ffffffffffffffff6002866002600581106118b957fe5b6020020151021617846000600581106118ce57fe5b602002015118836001600581106118e157fe5b6020020181815250506780000000000000008460036005811061190057fe5b60200201518161190c57fe5b0467ffffffffffffffff60028660036005811061192557fe5b60200201510216178460016005811061193a57fe5b6020020151188360026005811061194d57fe5b6020020181815250506780000000000000008460046005811061196c57fe5b60200201518161197857fe5b0467ffffffffffffffff60028660046005811061199157fe5b6020020151021617846002600581106119a657fe5b602002015118836003600581106119b957fe5b602002018181525050678000000000000000846000600581106119d857fe5b6020020151816119e457fe5b0467ffffffffffffffff6002866000600581106119fd57fe5b602002015102161784600360058110611a1257fe5b60200201511883600460058110611a2557fe5b60200201818152505082600060058110611a3b57fe5b602002015187600060198110611a4d57fe5b60200201511887600060198110611a6057fe5b60200201818152505082600060058110611a7657fe5b602002015187600160198110611a8857fe5b60200201511887600160198110611a9b57fe5b60200201818152505082600060058110611ab157fe5b602002015187600260198110611ac357fe5b60200201511887600260198110611ad657fe5b60200201818152505082600060058110611aec57fe5b602002015187600360198110611afe57fe5b60200201511887600360198110611b1157fe5b60200201818152505082600060058110611b2757fe5b602002015187600460198110611b3957fe5b60200201511887600460198110611b4c57fe5b60200201818152505082600160058110611b6257fe5b602002015187600560198110611b7457fe5b60200201511887600560198110611b8757fe5b60200201818152505082600160058110611b9d57fe5b602002015187600660198110611baf57fe5b60200201511887600660198110611bc257fe5b60200201818152505082600160058110611bd857fe5b602002015187600760198110611bea57fe5b60200201511887600760198110611bfd57fe5b60200201818152505082600160058110611c1357fe5b602002015187600860198110611c2557fe5b60200201511887600860198110611c3857fe5b60200201818152505082600160058110611c4e57fe5b602002015187600960198110611c6057fe5b60200201511887600960198110611c7357fe5b60200201818152505082600260058110611c8957fe5b602002015187600a60198110611c9b57fe5b60200201511887600a60198110611cae57fe5b60200201818152505082600260058110611cc457fe5b602002015187600b60198110611cd657fe5b60200201511887600b60198110611ce957fe5b60200201818152505082600260058110611cff57fe5b602002015187600c60198110611d1157fe5b60200201511887600c60198110611d2457fe5b60200201818152505082600260058110611d3a57fe5b602002015187600d60198110611d4c57fe5b60200201511887600d60198110611d5f57fe5b60200201818152505082600260058110611d7557fe5b602002015187600e60198110611d8757fe5b60200201511887600e60198110611d9a57fe5b60200201818152505082600360058110611db057fe5b602002015187600f60198110611dc257fe5b60200201511887600f60198110611dd557fe5b60200201818152505082600360058110611deb57fe5b602002015187601060198110611dfd57fe5b60200201511887601060198110611e1057fe5b60200201818152505082600360058110611e2657fe5b602002015187601160198110611e3857fe5b60200201511887601160198110611e4b57fe5b60200201818152505082600360058110611e6157fe5b602002015187601260198110611e7357fe5b60200201511887601260198110611e8657fe5b60200201818152505082600360058110611e9c57fe5b602002015187601360198110611eae57fe5b60200201511887601360198110611ec157fe5b60200201818152505082600460058110611ed757fe5b602002015187601460198110611ee957fe5b60200201511887601460198110611efc57fe5b60200201818152505082600460058110611f1257fe5b602002015187601560198110611f2457fe5b60200201511887601560198110611f3757fe5b60200201818152505082600460058110611f4d57fe5b602002015187601660198110611f5f57fe5b60200201511887601660198110611f7257fe5b60200201818152505082600460058110611f8857fe5b602002015187601760198110611f9a57fe5b60200201511887601760198110611fad57fe5b60200201818152505082600460058110611fc357fe5b602002015187601860198110611fd557fe5b60200201511887601860198110611fe857fe5b60200201818152505086600060198110611ffe57fe5b60200201518560006019811061201057fe5b60200201818152505063100000008760016019811061202b57fe5b60200201518161203757fe5b0467ffffffffffffffff6410000000008960016019811061205457fe5b60200201510216178560086019811061206957fe5b6020020181815250506720000000000000008760026019811061208857fe5b60200201518161209457fe5b0467ffffffffffffffff6008896002601981106120ad57fe5b602002015102161785600b601981106120c257fe5b60200201818152505062800000876003601981106120dc57fe5b6020020151816120e857fe5b0467ffffffffffffffff650200000000008960036019811061210657fe5b60200201510216178560136019811061211b57fe5b602002018181525050654000000000008760046019811061213857fe5b60200201518161214457fe5b0467ffffffffffffffff620400008960046019811061215f57fe5b60200201510216178560166019811061217457fe5b6020020181815250506780000000000000008760056019811061219357fe5b60200201518161219f57fe5b0467ffffffffffffffff6002896005601981106121b857fe5b6020020151021617856002601981106121cd57fe5b60200201818152505062100000876006601981106121e757fe5b6020020151816121f357fe5b0467ffffffffffffffff651000000000008960066019811061221157fe5b60200201510216178560056019811061222657fe5b60200201818152505066400000000000008760076019811061224457fe5b60200201518161225057fe5b0467ffffffffffffffff6104008960076019811061226a57fe5b602002015102161785600d6019811061227f57fe5b602002018181525050620800008760086019811061229957fe5b6020020151816122a557fe5b0467ffffffffffffffff65200000000000896008601981106122c357fe5b6020020151021617856010601981106122d857fe5b602002018181525050674000000000000000876009601981106122f757fe5b60200201518161230357fe5b0467ffffffffffffffff60048960096019811061231c57fe5b60200201510216178560186019811061233157fe5b602002018181525050600487600a6019811061234957fe5b60200201518161235557fe5b0467ffffffffffffffff67400000000000000089600a6019811061237557fe5b60200201510216178560046019811061238a57fe5b60200201818152505067040000000000000087600b601981106123a957fe5b6020020151816123b557fe5b0467ffffffffffffffff604089600b601981106123ce57fe5b6020020151021617856007601981106123e357fe5b6020020181815250506220000087600c601981106123fd57fe5b60200201518161240957fe5b0467ffffffffffffffff6508000000000089600c6019811061242757fe5b602002015102161785600a6019811061243c57fe5b602002018181525050660200000000000087600d6019811061245a57fe5b60200201518161246657fe5b0467ffffffffffffffff61800089600d6019811061248057fe5b60200201510216178560126019811061249557fe5b602002018181525050600887600e601981106124ad57fe5b6020020151816124b957fe5b0467ffffffffffffffff67200000000000000089600e601981106124d957fe5b6020020151021617856015601981106124ee57fe5b60200201818152505064100000000087600f6019811061250a57fe5b60200201518161251657fe5b0467ffffffffffffffff631000000089600f6019811061253257fe5b60200201510216178560016019811061254757fe5b6020020181815250506102008760106019811061256057fe5b60200201518161256c57fe5b0467ffffffffffffffff66800000000000008960106019811061258b57fe5b6020020151021617856009601981106125a057fe5b602002018181525050648000000000876011601981106125bc57fe5b6020020151816125c857fe5b0467ffffffffffffffff6302000000896011601981106125e457fe5b602002015102161785600c601981106125f957fe5b602002018181525050650800000000008760126019811061261657fe5b60200201518161262257fe5b0467ffffffffffffffff622000008960126019811061263d57fe5b602002015102161785600f6019811061265257fe5b6020020181815250506101008760136019811061266b57fe5b60200201518161267757fe5b0467ffffffffffffffff6701000000000000008960136019811061269757fe5b6020020151021617856017601981106126ac57fe5b602002018181525050642000000000876014601981106126c857fe5b6020020151816126d457fe5b0467ffffffffffffffff6308000000896014601981106126f057fe5b60200201510216178560036019811061270557fe5b602002018181525050651000000000008760156019811061272257fe5b60200201518161272e57fe5b0467ffffffffffffffff621000008960156019811061274957fe5b60200201510216178560066019811061275e57fe5b60200201818152505063020000008760166019811061277957fe5b60200201518161278557fe5b0467ffffffffffffffff648000000000896016601981106127a257fe5b602002015102161785600e601981106127b757fe5b602002018181525050670100000000000000876017601981106127d657fe5b6020020151816127e257fe5b0467ffffffffffffffff610100896017601981106127fc57fe5b60200201510216178560116019811061281157fe5b60200201818152505066040000000000008760186019811061282f57fe5b60200201518161283b57fe5b0467ffffffffffffffff6140008960186019811061285557fe5b60200201510216178560146019811061286a57fe5b60200201818152505084600a6019811061288057fe5b60200201518560056019811061289257fe5b60200201511916856000601981106128a657fe5b602002015118876000601981106128b957fe5b60200201818152505084600b601981106128cf57fe5b6020020151856006601981106128e157fe5b60200201511916856001601981106128f557fe5b6020020151188760016019811061290857fe5b60200201818152505084600c6019811061291e57fe5b60200201518560076019811061293057fe5b602002015119168560026019811061294457fe5b6020020151188760026019811061295757fe5b60200201818152505084600d6019811061296d57fe5b60200201518560086019811061297f57fe5b602002015119168560036019811061299357fe5b602002015118876003601981106129a657fe5b60200201818152505084600e601981106129bc57fe5b6020020151856009601981106129ce57fe5b60200201511916856004601981106129e257fe5b602002015118876004601981106129f557fe5b60200201818152505084600f60198110612a0b57fe5b602002015185600a60198110612a1d57fe5b6020020151191685600560198110612a3157fe5b60200201511887600560198110612a4457fe5b60200201818152505084601060198110612a5a57fe5b602002015185600b60198110612a6c57fe5b6020020151191685600660198110612a8057fe5b60200201511887600660198110612a9357fe5b60200201818152505084601160198110612aa957fe5b602002015185600c60198110612abb57fe5b6020020151191685600760198110612acf57fe5b60200201511887600760198110612ae257fe5b60200201818152505084601260198110612af857fe5b602002015185600d60198110612b0a57fe5b6020020151191685600860198110612b1e57fe5b60200201511887600860198110612b3157fe5b60200201818152505084601360198110612b4757fe5b602002015185600e60198110612b5957fe5b6020020151191685600960198110612b6d57fe5b60200201511887600960198110612b8057fe5b60200201818152505084601460198110612b9657fe5b602002015185600f60198110612ba857fe5b6020020151191685600a60198110612bbc57fe5b60200201511887600a60198110612bcf57fe5b60200201818152505084601560198110612be557fe5b602002015185601060198110612bf757fe5b6020020151191685600b60198110612c0b57fe5b60200201511887600b60198110612c1e57fe5b60200201818152505084601660198110612c3457fe5b602002015185601160198110612c4657fe5b6020020151191685600c60198110612c5a57fe5b60200201511887600c60198110612c6d57fe5b60200201818152505084601760198110612c8357fe5b602002015185601260198110612c9557fe5b6020020151191685600d60198110612ca957fe5b60200201511887600d60198110612cbc57fe5b60200201818152505084601860198110612cd257fe5b602002015185601360198110612ce457fe5b6020020151191685600e60198110612cf857fe5b60200201511887600e60198110612d0b57fe5b60200201818152505084600060198110612d2157fe5b602002015185601460198110612d3357fe5b6020020151191685600f60198110612d4757fe5b60200201511887600f60198110612d5a57fe5b60200201818152505084600160198110612d7057fe5b602002015185601560198110612d8257fe5b6020020151191685601060198110612d9657fe5b60200201511887601060198110612da957fe5b60200201818152505084600260198110612dbf57fe5b602002015185601660198110612dd157fe5b6020020151191685601160198110612de557fe5b60200201511887601160198110612df857fe5b60200201818152505084600360198110612e0e57fe5b602002015185601760198110612e2057fe5b6020020151191685601260198110612e3457fe5b60200201511887601260198110612e4757fe5b60200201818152505084600460198110612e5d57fe5b602002015185601860198110612e6f57fe5b6020020151191685601360198110612e8357fe5b60200201511887601360198110612e9657fe5b60200201818152505084600560198110612eac57fe5b602002015185600060198110612ebe57fe5b6020020151191685601460198110612ed257fe5b60200201511887601460198110612ee557fe5b60200201818152505084600660198110612efb57fe5b602002015185600160198110612f0d57fe5b6020020151191685601560198110612f2157fe5b60200201511887601560198110612f3457fe5b60200201818152505084600760198110612f4a57fe5b602002015185600260198110612f5c57fe5b6020020151191685601660198110612f7057fe5b60200201511887601660198110612f8357fe5b60200201818152505084600860198110612f9957fe5b602002015185600360198110612fab57fe5b6020020151191685601760198110612fbf57fe5b60200201511887601760198110612fd257fe5b60200201818152505084600960198110612fe857fe5b602002015185600460198110612ffa57fe5b602002015119168560186019811061300e57fe5b6020020151188760186019811061302157fe5b60200201818152505081816018811061303657fe5b60200201518760006019811061304857fe5b6020020151188760006019811061305b57fe5b60200201818152505080806001019150506115c5565b5085945050505050919050565b604051806102000160405280601090602082028038833980820191505090505090565b604051806104000160405280602090602082028038833980820191505090505090565b604051806101000160405280600890602082028038833980820191505090505090565b6040518060400160405280600290602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b604051806103200160405280601990602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b60405180610300016040528060189060208202803883398082019150509050509056fea265627a7a72315820bbf9cbc2c26c384ee0fa13c0f813b3a2f54a5530b26c43256bb9dc2304c5bfcd64736f6c63430005110032"

// DeployEthash deploys a new Ethereum contract, binding an instance of Ethash to it.
func DeployEthash(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ethash, error) {
	parsed, err := abi.JSON(strings.NewReader(EthashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EthashBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ethash{EthashCaller: EthashCaller{contract: contract}, EthashTransactor: EthashTransactor{contract: contract}, EthashFilterer: EthashFilterer{contract: contract}}, nil
}

// Ethash is an auto generated Go binding around an Ethereum contract.
type Ethash struct {
	EthashCaller     // Read-only binding to the contract
	EthashTransactor // Write-only binding to the contract
	EthashFilterer   // Log filterer for contract events
}

// EthashCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthashSession struct {
	Contract     *Ethash           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthashCallerSession struct {
	Contract *EthashCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// EthashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthashTransactorSession struct {
	Contract     *EthashTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthashRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthashRaw struct {
	Contract *Ethash // Generic contract binding to access the raw methods on
}

// EthashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthashCallerRaw struct {
	Contract *EthashCaller // Generic read-only contract binding to access the raw methods on
}

// EthashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthashTransactorRaw struct {
	Contract *EthashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthash creates a new instance of Ethash, bound to a specific deployed contract.
func NewEthash(address common.Address, backend bind.ContractBackend) (*Ethash, error) {
	contract, err := bindEthash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ethash{EthashCaller: EthashCaller{contract: contract}, EthashTransactor: EthashTransactor{contract: contract}, EthashFilterer: EthashFilterer{contract: contract}}, nil
}

// NewEthashCaller creates a new read-only instance of Ethash, bound to a specific deployed contract.
func NewEthashCaller(address common.Address, caller bind.ContractCaller) (*EthashCaller, error) {
	contract, err := bindEthash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthashCaller{contract: contract}, nil
}

// NewEthashTransactor creates a new write-only instance of Ethash, bound to a specific deployed contract.
func NewEthashTransactor(address common.Address, transactor bind.ContractTransactor) (*EthashTransactor, error) {
	contract, err := bindEthash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthashTransactor{contract: contract}, nil
}

// NewEthashFilterer creates a new log filterer instance of Ethash, bound to a specific deployed contract.
func NewEthashFilterer(address common.Address, filterer bind.ContractFilterer) (*EthashFilterer, error) {
	contract, err := bindEthash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthashFilterer{contract: contract}, nil
}

// bindEthash binds a generic wrapper to an already deployed contract.
func bindEthash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ethash *EthashRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ethash.Contract.EthashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ethash *EthashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ethash.Contract.EthashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ethash *EthashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ethash.Contract.EthashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ethash *EthashCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ethash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ethash *EthashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ethash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ethash *EthashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ethash.Contract.contract.Transact(opts, method, params...)
}

// IsEpochDataSet is a free data retrieval call binding the contract method 0xc7b81f4f.
//
// Solidity: function isEpochDataSet(uint256 epochIndex) view returns(bool)
func (_Ethash *EthashCaller) IsEpochDataSet(opts *bind.CallOpts, epochIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _Ethash.contract.Call(opts, &out, "isEpochDataSet", epochIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEpochDataSet is a free data retrieval call binding the contract method 0xc7b81f4f.
//
// Solidity: function isEpochDataSet(uint256 epochIndex) view returns(bool)
func (_Ethash *EthashSession) IsEpochDataSet(epochIndex *big.Int) (bool, error) {
	return _Ethash.Contract.IsEpochDataSet(&_Ethash.CallOpts, epochIndex)
}

// IsEpochDataSet is a free data retrieval call binding the contract method 0xc7b81f4f.
//
// Solidity: function isEpochDataSet(uint256 epochIndex) view returns(bool)
func (_Ethash *EthashCallerSession) IsEpochDataSet(epochIndex *big.Int) (bool, error) {
	return _Ethash.Contract.IsEpochDataSet(&_Ethash.CallOpts, epochIndex)
}

// VerifyPoW is a free data retrieval call binding the contract method 0x29e265df.
//
// Solidity: function verifyPoW(uint256 blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint256 nonce, uint256 difficulty, uint256[] dataSetLookup, uint256[] witnessForLookup) view returns(uint256, uint256)
func (_Ethash *EthashCaller) VerifyPoW(opts *bind.CallOpts, blockNumber *big.Int, rlpHeaderHashWithoutNonce [32]byte, nonce *big.Int, difficulty *big.Int, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Ethash.contract.Call(opts, &out, "verifyPoW", blockNumber, rlpHeaderHashWithoutNonce, nonce, difficulty, dataSetLookup, witnessForLookup)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// VerifyPoW is a free data retrieval call binding the contract method 0x29e265df.
//
// Solidity: function verifyPoW(uint256 blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint256 nonce, uint256 difficulty, uint256[] dataSetLookup, uint256[] witnessForLookup) view returns(uint256, uint256)
func (_Ethash *EthashSession) VerifyPoW(blockNumber *big.Int, rlpHeaderHashWithoutNonce [32]byte, nonce *big.Int, difficulty *big.Int, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*big.Int, *big.Int, error) {
	return _Ethash.Contract.VerifyPoW(&_Ethash.CallOpts, blockNumber, rlpHeaderHashWithoutNonce, nonce, difficulty, dataSetLookup, witnessForLookup)
}

// VerifyPoW is a free data retrieval call binding the contract method 0x29e265df.
//
// Solidity: function verifyPoW(uint256 blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint256 nonce, uint256 difficulty, uint256[] dataSetLookup, uint256[] witnessForLookup) view returns(uint256, uint256)
func (_Ethash *EthashCallerSession) VerifyPoW(blockNumber *big.Int, rlpHeaderHashWithoutNonce [32]byte, nonce *big.Int, difficulty *big.Int, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*big.Int, *big.Int, error) {
	return _Ethash.Contract.VerifyPoW(&_Ethash.CallOpts, blockNumber, rlpHeaderHashWithoutNonce, nonce, difficulty, dataSetLookup, witnessForLookup)
}

// SetEpochData is a paid mutator transaction binding the contract method 0xc891a29d.
//
// Solidity: function setEpochData(uint256 epoch, uint256 fullSizeIn128Resultion, uint256 branchDepth, uint256[] merkleNodes, uint256 start, uint256 numElems) returns()
func (_Ethash *EthashTransactor) SetEpochData(opts *bind.TransactOpts, epoch *big.Int, fullSizeIn128Resultion *big.Int, branchDepth *big.Int, merkleNodes []*big.Int, start *big.Int, numElems *big.Int) (*types.Transaction, error) {
	return _Ethash.contract.Transact(opts, "setEpochData", epoch, fullSizeIn128Resultion, branchDepth, merkleNodes, start, numElems)
}

// SetEpochData is a paid mutator transaction binding the contract method 0xc891a29d.
//
// Solidity: function setEpochData(uint256 epoch, uint256 fullSizeIn128Resultion, uint256 branchDepth, uint256[] merkleNodes, uint256 start, uint256 numElems) returns()
func (_Ethash *EthashSession) SetEpochData(epoch *big.Int, fullSizeIn128Resultion *big.Int, branchDepth *big.Int, merkleNodes []*big.Int, start *big.Int, numElems *big.Int) (*types.Transaction, error) {
	return _Ethash.Contract.SetEpochData(&_Ethash.TransactOpts, epoch, fullSizeIn128Resultion, branchDepth, merkleNodes, start, numElems)
}

// SetEpochData is a paid mutator transaction binding the contract method 0xc891a29d.
//
// Solidity: function setEpochData(uint256 epoch, uint256 fullSizeIn128Resultion, uint256 branchDepth, uint256[] merkleNodes, uint256 start, uint256 numElems) returns()
func (_Ethash *EthashTransactorSession) SetEpochData(epoch *big.Int, fullSizeIn128Resultion *big.Int, branchDepth *big.Int, merkleNodes []*big.Int, start *big.Int, numElems *big.Int) (*types.Transaction, error) {
	return _Ethash.Contract.SetEpochData(&_Ethash.TransactOpts, epoch, fullSizeIn128Resultion, branchDepth, merkleNodes, start, numElems)
}

// EthashSetEpochDataIterator is returned from FilterSetEpochData and is used to iterate over the raw logs and unpacked data for SetEpochData events raised by the Ethash contract.
type EthashSetEpochDataIterator struct {
	Event *EthashSetEpochData // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthashSetEpochDataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthashSetEpochData)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthashSetEpochData)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthashSetEpochDataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthashSetEpochDataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthashSetEpochData represents a SetEpochData event raised by the Ethash contract.
type EthashSetEpochData struct {
	Sender    common.Address
	Error     *big.Int
	ErrorInfo *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetEpochData is a free log retrieval operation binding the contract event 0x5cd723400be8430351b9cbaa5ea421b3fb2528c6a7650c493f895e7d97750da1.
//
// Solidity: event SetEpochData(address indexed sender, uint256 error, uint256 errorInfo)
func (_Ethash *EthashFilterer) FilterSetEpochData(opts *bind.FilterOpts, sender []common.Address) (*EthashSetEpochDataIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Ethash.contract.FilterLogs(opts, "SetEpochData", senderRule)
	if err != nil {
		return nil, err
	}
	return &EthashSetEpochDataIterator{contract: _Ethash.contract, event: "SetEpochData", logs: logs, sub: sub}, nil
}

// WatchSetEpochData is a free log subscription operation binding the contract event 0x5cd723400be8430351b9cbaa5ea421b3fb2528c6a7650c493f895e7d97750da1.
//
// Solidity: event SetEpochData(address indexed sender, uint256 error, uint256 errorInfo)
func (_Ethash *EthashFilterer) WatchSetEpochData(opts *bind.WatchOpts, sink chan<- *EthashSetEpochData, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Ethash.contract.WatchLogs(opts, "SetEpochData", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthashSetEpochData)
				if err := _Ethash.contract.UnpackLog(event, "SetEpochData", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetEpochData is a log parse operation binding the contract event 0x5cd723400be8430351b9cbaa5ea421b3fb2528c6a7650c493f895e7d97750da1.
//
// Solidity: event SetEpochData(address indexed sender, uint256 error, uint256 errorInfo)
func (_Ethash *EthashFilterer) ParseSetEpochData(log types.Log) (*EthashSetEpochData, error) {
	event := new(EthashSetEpochData)
	if err := _Ethash.contract.UnpackLog(event, "SetEpochData", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
